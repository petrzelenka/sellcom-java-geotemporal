/*
 * Copyright (c) 2015-2018 Petr Zelenka <petr.zelenka@sellcom.org>.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.sellcom.geotemporal.time;

import static java.time.Month.APRIL;
import static java.time.Month.DECEMBER;
import static java.time.Month.FEBRUARY;
import static java.time.Month.JULY;
import static java.time.Month.JUNE;
import static java.time.Month.MARCH;
import static java.time.Month.MAY;
import static java.time.Month.NOVEMBER;
import static org.hamcrest.core.Is.is;
import static org.hamcrest.core.IsEqual.equalTo;
import static org.junit.Assert.assertThat;
import static org.sellcom.geotemporal.time.MoreTemporalAdjusters.adventSunday;
import static org.sellcom.geotemporal.time.MoreTemporalAdjusters.ascensionThursday;
import static org.sellcom.geotemporal.time.MoreTemporalAdjusters.ashWednesday;
import static org.sellcom.geotemporal.time.MoreTemporalAdjusters.cleanMonday;
import static org.sellcom.geotemporal.time.MoreTemporalAdjusters.corpusChristi;
import static org.sellcom.geotemporal.time.MoreTemporalAdjusters.easterMonday;
import static org.sellcom.geotemporal.time.MoreTemporalAdjusters.goodFriday;
import static org.sellcom.geotemporal.time.MoreTemporalAdjusters.holySaturday;
import static org.sellcom.geotemporal.time.MoreTemporalAdjusters.holyWednesday;
import static org.sellcom.geotemporal.time.MoreTemporalAdjusters.maundyThursday;
import static org.sellcom.geotemporal.time.MoreTemporalAdjusters.orthodoxAllSaintsDay;
import static org.sellcom.geotemporal.time.MoreTemporalAdjusters.orthodoxAscensionThursday;
import static org.sellcom.geotemporal.time.MoreTemporalAdjusters.orthodoxEasterMonday;
import static org.sellcom.geotemporal.time.MoreTemporalAdjusters.orthodoxGoodFriday;
import static org.sellcom.geotemporal.time.MoreTemporalAdjusters.orthodoxHolySaturday;
import static org.sellcom.geotemporal.time.MoreTemporalAdjusters.orthodoxHolyWednesday;
import static org.sellcom.geotemporal.time.MoreTemporalAdjusters.orthodoxMaundyThursday;
import static org.sellcom.geotemporal.time.MoreTemporalAdjusters.orthodoxPalmSunday;
import static org.sellcom.geotemporal.time.MoreTemporalAdjusters.orthodoxWhitMonday;
import static org.sellcom.geotemporal.time.MoreTemporalAdjusters.orthodoxWhitSunday;
import static org.sellcom.geotemporal.time.MoreTemporalAdjusters.palmSunday;
import static org.sellcom.geotemporal.time.MoreTemporalAdjusters.shroveMonday;
import static org.sellcom.geotemporal.time.MoreTemporalAdjusters.shroveTuesday;
import static org.sellcom.geotemporal.time.MoreTemporalAdjusters.trinitySunday;
import static org.sellcom.geotemporal.time.MoreTemporalAdjusters.whitMonday;
import static org.sellcom.geotemporal.time.MoreTemporalAdjusters.whitSunday;

import java.time.LocalDate;

import org.junit.Test;
import org.sellcom.geotemporal.internal.time.TemporalAdjusterUtils;

public class MoreTemporalAdjustersTest__ReligiousDates {

	@Test
	public void testAdventSunday() {
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2000, adventSunday()), is(equalTo(LocalDate.of(2000, DECEMBER, 3))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2001, adventSunday()), is(equalTo(LocalDate.of(2001, DECEMBER, 2))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2002, adventSunday()), is(equalTo(LocalDate.of(2002, DECEMBER, 1))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2003, adventSunday()), is(equalTo(LocalDate.of(2003, NOVEMBER, 30))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2004, adventSunday()), is(equalTo(LocalDate.of(2004, NOVEMBER, 28))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2005, adventSunday()), is(equalTo(LocalDate.of(2005, NOVEMBER, 27))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2006, adventSunday()), is(equalTo(LocalDate.of(2006, DECEMBER, 3))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2007, adventSunday()), is(equalTo(LocalDate.of(2007, DECEMBER, 2))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2008, adventSunday()), is(equalTo(LocalDate.of(2008, NOVEMBER, 30))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2009, adventSunday()), is(equalTo(LocalDate.of(2009, NOVEMBER, 29))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2010, adventSunday()), is(equalTo(LocalDate.of(2010, NOVEMBER, 28))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2011, adventSunday()), is(equalTo(LocalDate.of(2011, NOVEMBER, 27))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2012, adventSunday()), is(equalTo(LocalDate.of(2012, DECEMBER, 2))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2013, adventSunday()), is(equalTo(LocalDate.of(2013, DECEMBER, 1))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2014, adventSunday()), is(equalTo(LocalDate.of(2014, NOVEMBER, 30))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2015, adventSunday()), is(equalTo(LocalDate.of(2015, NOVEMBER, 29))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2016, adventSunday()), is(equalTo(LocalDate.of(2016, NOVEMBER, 27))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2017, adventSunday()), is(equalTo(LocalDate.of(2017, DECEMBER, 3))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2018, adventSunday()), is(equalTo(LocalDate.of(2018, DECEMBER, 2))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2019, adventSunday()), is(equalTo(LocalDate.of(2019, DECEMBER, 1))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2020, adventSunday()), is(equalTo(LocalDate.of(2020, NOVEMBER, 29))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2021, adventSunday()), is(equalTo(LocalDate.of(2021, NOVEMBER, 28))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2022, adventSunday()), is(equalTo(LocalDate.of(2022, NOVEMBER, 27))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2023, adventSunday()), is(equalTo(LocalDate.of(2023, DECEMBER, 3))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2024, adventSunday()), is(equalTo(LocalDate.of(2024, DECEMBER, 1))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2025, adventSunday()), is(equalTo(LocalDate.of(2025, NOVEMBER, 30))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2026, adventSunday()), is(equalTo(LocalDate.of(2026, NOVEMBER, 29))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2027, adventSunday()), is(equalTo(LocalDate.of(2027, NOVEMBER, 28))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2028, adventSunday()), is(equalTo(LocalDate.of(2028, DECEMBER, 3))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2029, adventSunday()), is(equalTo(LocalDate.of(2029, DECEMBER, 2))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2030, adventSunday()), is(equalTo(LocalDate.of(2030, DECEMBER, 1))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2031, adventSunday()), is(equalTo(LocalDate.of(2031, NOVEMBER, 30))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2032, adventSunday()), is(equalTo(LocalDate.of(2032, NOVEMBER, 28))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2033, adventSunday()), is(equalTo(LocalDate.of(2033, NOVEMBER, 27))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2034, adventSunday()), is(equalTo(LocalDate.of(2034, DECEMBER, 3))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2035, adventSunday()), is(equalTo(LocalDate.of(2035, DECEMBER, 2))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2036, adventSunday()), is(equalTo(LocalDate.of(2036, NOVEMBER, 30))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2037, adventSunday()), is(equalTo(LocalDate.of(2037, NOVEMBER, 29))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2038, adventSunday()), is(equalTo(LocalDate.of(2038, NOVEMBER, 28))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2039, adventSunday()), is(equalTo(LocalDate.of(2039, NOVEMBER, 27))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2040, adventSunday()), is(equalTo(LocalDate.of(2040, DECEMBER, 2))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2041, adventSunday()), is(equalTo(LocalDate.of(2041, DECEMBER, 1))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2042, adventSunday()), is(equalTo(LocalDate.of(2042, NOVEMBER, 30))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2043, adventSunday()), is(equalTo(LocalDate.of(2043, NOVEMBER, 29))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2044, adventSunday()), is(equalTo(LocalDate.of(2044, NOVEMBER, 27))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2045, adventSunday()), is(equalTo(LocalDate.of(2045, DECEMBER, 3))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2046, adventSunday()), is(equalTo(LocalDate.of(2046, DECEMBER, 2))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2047, adventSunday()), is(equalTo(LocalDate.of(2047, DECEMBER, 1))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2048, adventSunday()), is(equalTo(LocalDate.of(2048, NOVEMBER, 29))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2049, adventSunday()), is(equalTo(LocalDate.of(2049, NOVEMBER, 28))));
	}

	@Test
	public void testAscensionThursday() {
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2000, ascensionThursday()), is(equalTo(LocalDate.of(2000, JUNE, 1))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2001, ascensionThursday()), is(equalTo(LocalDate.of(2001, MAY, 24))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2002, ascensionThursday()), is(equalTo(LocalDate.of(2002, MAY, 9))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2003, ascensionThursday()), is(equalTo(LocalDate.of(2003, MAY, 29))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2004, ascensionThursday()), is(equalTo(LocalDate.of(2004, MAY, 20))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2005, ascensionThursday()), is(equalTo(LocalDate.of(2005, MAY, 5))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2006, ascensionThursday()), is(equalTo(LocalDate.of(2006, MAY, 25))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2007, ascensionThursday()), is(equalTo(LocalDate.of(2007, MAY, 17))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2008, ascensionThursday()), is(equalTo(LocalDate.of(2008, MAY, 1))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2009, ascensionThursday()), is(equalTo(LocalDate.of(2009, MAY, 21))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2010, ascensionThursday()), is(equalTo(LocalDate.of(2010, MAY, 13))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2011, ascensionThursday()), is(equalTo(LocalDate.of(2011, JUNE, 2))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2012, ascensionThursday()), is(equalTo(LocalDate.of(2012, MAY, 17))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2013, ascensionThursday()), is(equalTo(LocalDate.of(2013, MAY, 9))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2014, ascensionThursday()), is(equalTo(LocalDate.of(2014, MAY, 29))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2015, ascensionThursday()), is(equalTo(LocalDate.of(2015, MAY, 14))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2016, ascensionThursday()), is(equalTo(LocalDate.of(2016, MAY, 5))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2017, ascensionThursday()), is(equalTo(LocalDate.of(2017, MAY, 25))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2018, ascensionThursday()), is(equalTo(LocalDate.of(2018, MAY, 10))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2019, ascensionThursday()), is(equalTo(LocalDate.of(2019, MAY, 30))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2020, ascensionThursday()), is(equalTo(LocalDate.of(2020, MAY, 21))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2021, ascensionThursday()), is(equalTo(LocalDate.of(2021, MAY, 13))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2022, ascensionThursday()), is(equalTo(LocalDate.of(2022, MAY, 26))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2023, ascensionThursday()), is(equalTo(LocalDate.of(2023, MAY, 18))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2024, ascensionThursday()), is(equalTo(LocalDate.of(2024, MAY, 9))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2025, ascensionThursday()), is(equalTo(LocalDate.of(2025, MAY, 29))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2026, ascensionThursday()), is(equalTo(LocalDate.of(2026, MAY, 14))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2027, ascensionThursday()), is(equalTo(LocalDate.of(2027, MAY, 6))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2028, ascensionThursday()), is(equalTo(LocalDate.of(2028, MAY, 25))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2029, ascensionThursday()), is(equalTo(LocalDate.of(2029, MAY, 10))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2030, ascensionThursday()), is(equalTo(LocalDate.of(2030, MAY, 30))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2031, ascensionThursday()), is(equalTo(LocalDate.of(2031, MAY, 22))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2032, ascensionThursday()), is(equalTo(LocalDate.of(2032, MAY, 6))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2033, ascensionThursday()), is(equalTo(LocalDate.of(2033, MAY, 26))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2034, ascensionThursday()), is(equalTo(LocalDate.of(2034, MAY, 18))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2035, ascensionThursday()), is(equalTo(LocalDate.of(2035, MAY, 3))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2036, ascensionThursday()), is(equalTo(LocalDate.of(2036, MAY, 22))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2037, ascensionThursday()), is(equalTo(LocalDate.of(2037, MAY, 14))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2038, ascensionThursday()), is(equalTo(LocalDate.of(2038, JUNE, 3))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2039, ascensionThursday()), is(equalTo(LocalDate.of(2039, MAY, 19))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2040, ascensionThursday()), is(equalTo(LocalDate.of(2040, MAY, 10))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2041, ascensionThursday()), is(equalTo(LocalDate.of(2041, MAY, 30))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2042, ascensionThursday()), is(equalTo(LocalDate.of(2042, MAY, 15))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2043, ascensionThursday()), is(equalTo(LocalDate.of(2043, MAY, 7))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2044, ascensionThursday()), is(equalTo(LocalDate.of(2044, MAY, 26))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2045, ascensionThursday()), is(equalTo(LocalDate.of(2045, MAY, 18))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2046, ascensionThursday()), is(equalTo(LocalDate.of(2046, MAY, 3))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2047, ascensionThursday()), is(equalTo(LocalDate.of(2047, MAY, 23))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2048, ascensionThursday()), is(equalTo(LocalDate.of(2048, MAY, 14))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2049, ascensionThursday()), is(equalTo(LocalDate.of(2049, MAY, 27))));
	}

	@Test
	public void testAshWednesday() {
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2000, ashWednesday()), is(equalTo(LocalDate.of(2000, MARCH, 8))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2001, ashWednesday()), is(equalTo(LocalDate.of(2001, FEBRUARY, 28))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2002, ashWednesday()), is(equalTo(LocalDate.of(2002, FEBRUARY, 13))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2003, ashWednesday()), is(equalTo(LocalDate.of(2003, MARCH, 5))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2004, ashWednesday()), is(equalTo(LocalDate.of(2004, FEBRUARY, 25))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2005, ashWednesday()), is(equalTo(LocalDate.of(2005, FEBRUARY, 9))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2006, ashWednesday()), is(equalTo(LocalDate.of(2006, MARCH, 1))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2007, ashWednesday()), is(equalTo(LocalDate.of(2007, FEBRUARY, 21))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2008, ashWednesday()), is(equalTo(LocalDate.of(2008, FEBRUARY, 6))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2009, ashWednesday()), is(equalTo(LocalDate.of(2009, FEBRUARY, 25))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2010, ashWednesday()), is(equalTo(LocalDate.of(2010, FEBRUARY, 17))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2011, ashWednesday()), is(equalTo(LocalDate.of(2011, MARCH, 9))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2012, ashWednesday()), is(equalTo(LocalDate.of(2012, FEBRUARY, 22))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2013, ashWednesday()), is(equalTo(LocalDate.of(2013, FEBRUARY, 13))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2014, ashWednesday()), is(equalTo(LocalDate.of(2014, MARCH, 5))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2015, ashWednesday()), is(equalTo(LocalDate.of(2015, FEBRUARY, 18))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2016, ashWednesday()), is(equalTo(LocalDate.of(2016, FEBRUARY, 10))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2017, ashWednesday()), is(equalTo(LocalDate.of(2017, MARCH, 1))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2018, ashWednesday()), is(equalTo(LocalDate.of(2018, FEBRUARY, 14))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2019, ashWednesday()), is(equalTo(LocalDate.of(2019, MARCH, 6))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2020, ashWednesday()), is(equalTo(LocalDate.of(2020, FEBRUARY, 26))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2021, ashWednesday()), is(equalTo(LocalDate.of(2021, FEBRUARY, 17))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2022, ashWednesday()), is(equalTo(LocalDate.of(2022, MARCH, 2))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2023, ashWednesday()), is(equalTo(LocalDate.of(2023, FEBRUARY, 22))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2024, ashWednesday()), is(equalTo(LocalDate.of(2024, FEBRUARY, 14))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2025, ashWednesday()), is(equalTo(LocalDate.of(2025, MARCH, 5))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2026, ashWednesday()), is(equalTo(LocalDate.of(2026, FEBRUARY, 18))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2027, ashWednesday()), is(equalTo(LocalDate.of(2027, FEBRUARY, 10))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2028, ashWednesday()), is(equalTo(LocalDate.of(2028, MARCH, 1))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2029, ashWednesday()), is(equalTo(LocalDate.of(2029, FEBRUARY, 14))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2030, ashWednesday()), is(equalTo(LocalDate.of(2030, MARCH, 6))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2031, ashWednesday()), is(equalTo(LocalDate.of(2031, FEBRUARY, 26))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2032, ashWednesday()), is(equalTo(LocalDate.of(2032, FEBRUARY, 11))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2033, ashWednesday()), is(equalTo(LocalDate.of(2033, MARCH, 2))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2034, ashWednesday()), is(equalTo(LocalDate.of(2034, FEBRUARY, 22))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2035, ashWednesday()), is(equalTo(LocalDate.of(2035, FEBRUARY, 7))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2036, ashWednesday()), is(equalTo(LocalDate.of(2036, FEBRUARY, 27))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2037, ashWednesday()), is(equalTo(LocalDate.of(2037, FEBRUARY, 18))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2038, ashWednesday()), is(equalTo(LocalDate.of(2038, MARCH, 10))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2039, ashWednesday()), is(equalTo(LocalDate.of(2039, FEBRUARY, 23))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2040, ashWednesday()), is(equalTo(LocalDate.of(2040, FEBRUARY, 15))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2041, ashWednesday()), is(equalTo(LocalDate.of(2041, MARCH, 6))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2042, ashWednesday()), is(equalTo(LocalDate.of(2042, FEBRUARY, 19))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2043, ashWednesday()), is(equalTo(LocalDate.of(2043, FEBRUARY, 11))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2044, ashWednesday()), is(equalTo(LocalDate.of(2044, MARCH, 2))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2045, ashWednesday()), is(equalTo(LocalDate.of(2045, FEBRUARY, 22))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2046, ashWednesday()), is(equalTo(LocalDate.of(2046, FEBRUARY, 7))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2047, ashWednesday()), is(equalTo(LocalDate.of(2047, FEBRUARY, 27))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2048, ashWednesday()), is(equalTo(LocalDate.of(2048, FEBRUARY, 19))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2049, ashWednesday()), is(equalTo(LocalDate.of(2049, MARCH, 3))));
	}

	@Test
	public void testCleanMonday() {
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2000, cleanMonday()), is(equalTo(LocalDate.of(2000, MARCH, 13))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2001, cleanMonday()), is(equalTo(LocalDate.of(2001, FEBRUARY, 26))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2002, cleanMonday()), is(equalTo(LocalDate.of(2002, MARCH, 18))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2003, cleanMonday()), is(equalTo(LocalDate.of(2003, MARCH, 10))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2004, cleanMonday()), is(equalTo(LocalDate.of(2004, FEBRUARY, 23))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2005, cleanMonday()), is(equalTo(LocalDate.of(2005, MARCH, 14))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2006, cleanMonday()), is(equalTo(LocalDate.of(2006, MARCH, 6))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2007, cleanMonday()), is(equalTo(LocalDate.of(2007, FEBRUARY, 19))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2008, cleanMonday()), is(equalTo(LocalDate.of(2008, MARCH, 10))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2009, cleanMonday()), is(equalTo(LocalDate.of(2009, MARCH, 2))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2010, cleanMonday()), is(equalTo(LocalDate.of(2010, FEBRUARY, 15))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2011, cleanMonday()), is(equalTo(LocalDate.of(2011, MARCH, 7))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2012, cleanMonday()), is(equalTo(LocalDate.of(2012, FEBRUARY, 27))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2013, cleanMonday()), is(equalTo(LocalDate.of(2013, MARCH, 18))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2014, cleanMonday()), is(equalTo(LocalDate.of(2014, MARCH, 3))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2015, cleanMonday()), is(equalTo(LocalDate.of(2015, FEBRUARY, 23))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2016, cleanMonday()), is(equalTo(LocalDate.of(2016, MARCH, 14))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2017, cleanMonday()), is(equalTo(LocalDate.of(2017, FEBRUARY, 27))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2018, cleanMonday()), is(equalTo(LocalDate.of(2018, FEBRUARY, 19))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2019, cleanMonday()), is(equalTo(LocalDate.of(2019, MARCH, 11))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2020, cleanMonday()), is(equalTo(LocalDate.of(2020, MARCH, 2))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2021, cleanMonday()), is(equalTo(LocalDate.of(2021, MARCH, 15))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2022, cleanMonday()), is(equalTo(LocalDate.of(2022, MARCH, 7))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2023, cleanMonday()), is(equalTo(LocalDate.of(2023, FEBRUARY, 27))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2024, cleanMonday()), is(equalTo(LocalDate.of(2024, MARCH, 18))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2025, cleanMonday()), is(equalTo(LocalDate.of(2025, MARCH, 3))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2026, cleanMonday()), is(equalTo(LocalDate.of(2026, FEBRUARY, 23))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2027, cleanMonday()), is(equalTo(LocalDate.of(2027, MARCH, 15))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2028, cleanMonday()), is(equalTo(LocalDate.of(2028, FEBRUARY, 28))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2029, cleanMonday()), is(equalTo(LocalDate.of(2029, FEBRUARY, 19))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2030, cleanMonday()), is(equalTo(LocalDate.of(2030, MARCH, 11))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2031, cleanMonday()), is(equalTo(LocalDate.of(2031, FEBRUARY, 24))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2032, cleanMonday()), is(equalTo(LocalDate.of(2032, MARCH, 15))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2033, cleanMonday()), is(equalTo(LocalDate.of(2033, MARCH, 7))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2034, cleanMonday()), is(equalTo(LocalDate.of(2034, FEBRUARY, 20))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2035, cleanMonday()), is(equalTo(LocalDate.of(2035, MARCH, 12))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2036, cleanMonday()), is(equalTo(LocalDate.of(2036, MARCH, 3))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2037, cleanMonday()), is(equalTo(LocalDate.of(2037, FEBRUARY, 16))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2038, cleanMonday()), is(equalTo(LocalDate.of(2038, MARCH, 8))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2039, cleanMonday()), is(equalTo(LocalDate.of(2039, FEBRUARY, 28))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2040, cleanMonday()), is(equalTo(LocalDate.of(2040, MARCH, 19))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2041, cleanMonday()), is(equalTo(LocalDate.of(2041, MARCH, 4))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2042, cleanMonday()), is(equalTo(LocalDate.of(2042, FEBRUARY, 24))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2043, cleanMonday()), is(equalTo(LocalDate.of(2043, MARCH, 16))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2044, cleanMonday()), is(equalTo(LocalDate.of(2044, MARCH, 7))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2045, cleanMonday()), is(equalTo(LocalDate.of(2045, FEBRUARY, 20))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2046, cleanMonday()), is(equalTo(LocalDate.of(2046, MARCH, 12))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2047, cleanMonday()), is(equalTo(LocalDate.of(2047, MARCH, 4))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2048, cleanMonday()), is(equalTo(LocalDate.of(2048, FEBRUARY, 17))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2049, cleanMonday()), is(equalTo(LocalDate.of(2049, MARCH, 8))));
	}

	@Test
	public void testCorpusChristi() {
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2000, corpusChristi()), is(equalTo(LocalDate.of(2000, JUNE, 22))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2001, corpusChristi()), is(equalTo(LocalDate.of(2001, JUNE, 14))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2002, corpusChristi()), is(equalTo(LocalDate.of(2002, MAY, 30))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2003, corpusChristi()), is(equalTo(LocalDate.of(2003, JUNE, 19))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2004, corpusChristi()), is(equalTo(LocalDate.of(2004, JUNE, 10))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2005, corpusChristi()), is(equalTo(LocalDate.of(2005, MAY, 26))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2006, corpusChristi()), is(equalTo(LocalDate.of(2006, JUNE, 15))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2007, corpusChristi()), is(equalTo(LocalDate.of(2007, JUNE, 7))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2008, corpusChristi()), is(equalTo(LocalDate.of(2008, MAY, 22))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2009, corpusChristi()), is(equalTo(LocalDate.of(2009, JUNE, 11))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2010, corpusChristi()), is(equalTo(LocalDate.of(2010, JUNE, 3))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2011, corpusChristi()), is(equalTo(LocalDate.of(2011, JUNE, 23))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2012, corpusChristi()), is(equalTo(LocalDate.of(2012, JUNE, 7))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2013, corpusChristi()), is(equalTo(LocalDate.of(2013, MAY, 30))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2014, corpusChristi()), is(equalTo(LocalDate.of(2014, JUNE, 19))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2015, corpusChristi()), is(equalTo(LocalDate.of(2015, JUNE, 4))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2016, corpusChristi()), is(equalTo(LocalDate.of(2016, MAY, 26))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2017, corpusChristi()), is(equalTo(LocalDate.of(2017, JUNE, 15))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2018, corpusChristi()), is(equalTo(LocalDate.of(2018, MAY, 31))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2019, corpusChristi()), is(equalTo(LocalDate.of(2019, JUNE, 20))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2020, corpusChristi()), is(equalTo(LocalDate.of(2020, JUNE, 11))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2021, corpusChristi()), is(equalTo(LocalDate.of(2021, JUNE, 3))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2022, corpusChristi()), is(equalTo(LocalDate.of(2022, JUNE, 16))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2023, corpusChristi()), is(equalTo(LocalDate.of(2023, JUNE, 8))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2024, corpusChristi()), is(equalTo(LocalDate.of(2024, MAY, 30))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2025, corpusChristi()), is(equalTo(LocalDate.of(2025, JUNE, 19))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2026, corpusChristi()), is(equalTo(LocalDate.of(2026, JUNE, 4))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2027, corpusChristi()), is(equalTo(LocalDate.of(2027, MAY, 27))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2028, corpusChristi()), is(equalTo(LocalDate.of(2028, JUNE, 15))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2029, corpusChristi()), is(equalTo(LocalDate.of(2029, MAY, 31))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2030, corpusChristi()), is(equalTo(LocalDate.of(2030, JUNE, 20))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2031, corpusChristi()), is(equalTo(LocalDate.of(2031, JUNE, 12))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2032, corpusChristi()), is(equalTo(LocalDate.of(2032, MAY, 27))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2033, corpusChristi()), is(equalTo(LocalDate.of(2033, JUNE, 16))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2034, corpusChristi()), is(equalTo(LocalDate.of(2034, JUNE, 8))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2035, corpusChristi()), is(equalTo(LocalDate.of(2035, MAY, 24))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2036, corpusChristi()), is(equalTo(LocalDate.of(2036, JUNE, 12))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2037, corpusChristi()), is(equalTo(LocalDate.of(2037, JUNE, 4))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2038, corpusChristi()), is(equalTo(LocalDate.of(2038, JUNE, 24))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2039, corpusChristi()), is(equalTo(LocalDate.of(2039, JUNE, 9))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2040, corpusChristi()), is(equalTo(LocalDate.of(2040, MAY, 31))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2041, corpusChristi()), is(equalTo(LocalDate.of(2041, JUNE, 20))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2042, corpusChristi()), is(equalTo(LocalDate.of(2042, JUNE, 5))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2043, corpusChristi()), is(equalTo(LocalDate.of(2043, MAY, 28))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2044, corpusChristi()), is(equalTo(LocalDate.of(2044, JUNE, 16))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2045, corpusChristi()), is(equalTo(LocalDate.of(2045, JUNE, 8))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2046, corpusChristi()), is(equalTo(LocalDate.of(2046, MAY, 24))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2047, corpusChristi()), is(equalTo(LocalDate.of(2047, JUNE, 13))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2048, corpusChristi()), is(equalTo(LocalDate.of(2048, JUNE, 4))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2049, corpusChristi()), is(equalTo(LocalDate.of(2049, JUNE, 17))));
	}

	@Test
	public void testEasterMonday() {
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2000, easterMonday()), is(equalTo(LocalDate.of(2000, APRIL, 24))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2001, easterMonday()), is(equalTo(LocalDate.of(2001, APRIL, 16))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2002, easterMonday()), is(equalTo(LocalDate.of(2002, APRIL, 1))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2003, easterMonday()), is(equalTo(LocalDate.of(2003, APRIL, 21))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2004, easterMonday()), is(equalTo(LocalDate.of(2004, APRIL, 12))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2005, easterMonday()), is(equalTo(LocalDate.of(2005, MARCH, 28))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2006, easterMonday()), is(equalTo(LocalDate.of(2006, APRIL, 17))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2007, easterMonday()), is(equalTo(LocalDate.of(2007, APRIL, 9))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2008, easterMonday()), is(equalTo(LocalDate.of(2008, MARCH, 24))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2009, easterMonday()), is(equalTo(LocalDate.of(2009, APRIL, 13))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2010, easterMonday()), is(equalTo(LocalDate.of(2010, APRIL, 5))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2011, easterMonday()), is(equalTo(LocalDate.of(2011, APRIL, 25))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2012, easterMonday()), is(equalTo(LocalDate.of(2012, APRIL, 9))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2013, easterMonday()), is(equalTo(LocalDate.of(2013, APRIL, 1))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2014, easterMonday()), is(equalTo(LocalDate.of(2014, APRIL, 21))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2015, easterMonday()), is(equalTo(LocalDate.of(2015, APRIL, 6))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2016, easterMonday()), is(equalTo(LocalDate.of(2016, MARCH, 28))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2017, easterMonday()), is(equalTo(LocalDate.of(2017, APRIL, 17))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2018, easterMonday()), is(equalTo(LocalDate.of(2018, APRIL, 2))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2019, easterMonday()), is(equalTo(LocalDate.of(2019, APRIL, 22))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2020, easterMonday()), is(equalTo(LocalDate.of(2020, APRIL, 13))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2021, easterMonday()), is(equalTo(LocalDate.of(2021, APRIL, 5))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2022, easterMonday()), is(equalTo(LocalDate.of(2022, APRIL, 18))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2023, easterMonday()), is(equalTo(LocalDate.of(2023, APRIL, 10))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2024, easterMonday()), is(equalTo(LocalDate.of(2024, APRIL, 1))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2025, easterMonday()), is(equalTo(LocalDate.of(2025, APRIL, 21))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2026, easterMonday()), is(equalTo(LocalDate.of(2026, APRIL, 6))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2027, easterMonday()), is(equalTo(LocalDate.of(2027, MARCH, 29))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2028, easterMonday()), is(equalTo(LocalDate.of(2028, APRIL, 17))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2029, easterMonday()), is(equalTo(LocalDate.of(2029, APRIL, 2))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2030, easterMonday()), is(equalTo(LocalDate.of(2030, APRIL, 22))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2031, easterMonday()), is(equalTo(LocalDate.of(2031, APRIL, 14))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2032, easterMonday()), is(equalTo(LocalDate.of(2032, MARCH, 29))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2033, easterMonday()), is(equalTo(LocalDate.of(2033, APRIL, 18))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2034, easterMonday()), is(equalTo(LocalDate.of(2034, APRIL, 10))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2035, easterMonday()), is(equalTo(LocalDate.of(2035, MARCH, 26))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2036, easterMonday()), is(equalTo(LocalDate.of(2036, APRIL, 14))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2037, easterMonday()), is(equalTo(LocalDate.of(2037, APRIL, 6))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2038, easterMonday()), is(equalTo(LocalDate.of(2038, APRIL, 26))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2039, easterMonday()), is(equalTo(LocalDate.of(2039, APRIL, 11))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2040, easterMonday()), is(equalTo(LocalDate.of(2040, APRIL, 2))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2041, easterMonday()), is(equalTo(LocalDate.of(2041, APRIL, 22))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2042, easterMonday()), is(equalTo(LocalDate.of(2042, APRIL, 7))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2043, easterMonday()), is(equalTo(LocalDate.of(2043, MARCH, 30))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2044, easterMonday()), is(equalTo(LocalDate.of(2044, APRIL, 18))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2045, easterMonday()), is(equalTo(LocalDate.of(2045, APRIL, 10))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2046, easterMonday()), is(equalTo(LocalDate.of(2046, MARCH, 26))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2047, easterMonday()), is(equalTo(LocalDate.of(2047, APRIL, 15))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2048, easterMonday()), is(equalTo(LocalDate.of(2048, APRIL, 6))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2049, easterMonday()), is(equalTo(LocalDate.of(2049, APRIL, 19))));
	}

	@Test
	public void testGoodFriday() {
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2000, goodFriday()), is(equalTo(LocalDate.of(2000, APRIL, 21))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2001, goodFriday()), is(equalTo(LocalDate.of(2001, APRIL, 13))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2002, goodFriday()), is(equalTo(LocalDate.of(2002, MARCH, 29))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2003, goodFriday()), is(equalTo(LocalDate.of(2003, APRIL, 18))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2004, goodFriday()), is(equalTo(LocalDate.of(2004, APRIL, 9))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2005, goodFriday()), is(equalTo(LocalDate.of(2005, MARCH, 25))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2006, goodFriday()), is(equalTo(LocalDate.of(2006, APRIL, 14))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2007, goodFriday()), is(equalTo(LocalDate.of(2007, APRIL, 6))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2008, goodFriday()), is(equalTo(LocalDate.of(2008, MARCH, 21))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2009, goodFriday()), is(equalTo(LocalDate.of(2009, APRIL, 10))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2010, goodFriday()), is(equalTo(LocalDate.of(2010, APRIL, 2))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2011, goodFriday()), is(equalTo(LocalDate.of(2011, APRIL, 22))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2012, goodFriday()), is(equalTo(LocalDate.of(2012, APRIL, 6))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2013, goodFriday()), is(equalTo(LocalDate.of(2013, MARCH, 29))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2014, goodFriday()), is(equalTo(LocalDate.of(2014, APRIL, 18))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2015, goodFriday()), is(equalTo(LocalDate.of(2015, APRIL, 3))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2016, goodFriday()), is(equalTo(LocalDate.of(2016, MARCH, 25))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2017, goodFriday()), is(equalTo(LocalDate.of(2017, APRIL, 14))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2018, goodFriday()), is(equalTo(LocalDate.of(2018, MARCH, 30))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2019, goodFriday()), is(equalTo(LocalDate.of(2019, APRIL, 19))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2020, goodFriday()), is(equalTo(LocalDate.of(2020, APRIL, 10))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2021, goodFriday()), is(equalTo(LocalDate.of(2021, APRIL, 2))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2022, goodFriday()), is(equalTo(LocalDate.of(2022, APRIL, 15))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2023, goodFriday()), is(equalTo(LocalDate.of(2023, APRIL, 7))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2024, goodFriday()), is(equalTo(LocalDate.of(2024, MARCH, 29))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2025, goodFriday()), is(equalTo(LocalDate.of(2025, APRIL, 18))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2026, goodFriday()), is(equalTo(LocalDate.of(2026, APRIL, 3))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2027, goodFriday()), is(equalTo(LocalDate.of(2027, MARCH, 26))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2028, goodFriday()), is(equalTo(LocalDate.of(2028, APRIL, 14))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2029, goodFriday()), is(equalTo(LocalDate.of(2029, MARCH, 30))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2030, goodFriday()), is(equalTo(LocalDate.of(2030, APRIL, 19))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2031, goodFriday()), is(equalTo(LocalDate.of(2031, APRIL, 11))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2032, goodFriday()), is(equalTo(LocalDate.of(2032, MARCH, 26))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2033, goodFriday()), is(equalTo(LocalDate.of(2033, APRIL, 15))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2034, goodFriday()), is(equalTo(LocalDate.of(2034, APRIL, 7))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2035, goodFriday()), is(equalTo(LocalDate.of(2035, MARCH, 23))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2036, goodFriday()), is(equalTo(LocalDate.of(2036, APRIL, 11))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2037, goodFriday()), is(equalTo(LocalDate.of(2037, APRIL, 3))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2038, goodFriday()), is(equalTo(LocalDate.of(2038, APRIL, 23))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2039, goodFriday()), is(equalTo(LocalDate.of(2039, APRIL, 8))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2040, goodFriday()), is(equalTo(LocalDate.of(2040, MARCH, 30))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2041, goodFriday()), is(equalTo(LocalDate.of(2041, APRIL, 19))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2042, goodFriday()), is(equalTo(LocalDate.of(2042, APRIL, 4))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2043, goodFriday()), is(equalTo(LocalDate.of(2043, MARCH, 27))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2044, goodFriday()), is(equalTo(LocalDate.of(2044, APRIL, 15))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2045, goodFriday()), is(equalTo(LocalDate.of(2045, APRIL, 7))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2046, goodFriday()), is(equalTo(LocalDate.of(2046, MARCH, 23))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2047, goodFriday()), is(equalTo(LocalDate.of(2047, APRIL, 12))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2048, goodFriday()), is(equalTo(LocalDate.of(2048, APRIL, 3))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2049, goodFriday()), is(equalTo(LocalDate.of(2049, APRIL, 16))));
	}

	@Test
	public void testHolySaturday() {
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2000, holySaturday()), is(equalTo(LocalDate.of(2000, APRIL, 22))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2001, holySaturday()), is(equalTo(LocalDate.of(2001, APRIL, 14))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2002, holySaturday()), is(equalTo(LocalDate.of(2002, MARCH, 30))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2003, holySaturday()), is(equalTo(LocalDate.of(2003, APRIL, 19))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2004, holySaturday()), is(equalTo(LocalDate.of(2004, APRIL, 10))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2005, holySaturday()), is(equalTo(LocalDate.of(2005, MARCH, 26))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2006, holySaturday()), is(equalTo(LocalDate.of(2006, APRIL, 15))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2007, holySaturday()), is(equalTo(LocalDate.of(2007, APRIL, 7))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2008, holySaturday()), is(equalTo(LocalDate.of(2008, MARCH, 22))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2009, holySaturday()), is(equalTo(LocalDate.of(2009, APRIL, 11))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2010, holySaturday()), is(equalTo(LocalDate.of(2010, APRIL, 3))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2011, holySaturday()), is(equalTo(LocalDate.of(2011, APRIL, 23))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2012, holySaturday()), is(equalTo(LocalDate.of(2012, APRIL, 7))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2013, holySaturday()), is(equalTo(LocalDate.of(2013, MARCH, 30))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2014, holySaturday()), is(equalTo(LocalDate.of(2014, APRIL, 19))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2015, holySaturday()), is(equalTo(LocalDate.of(2015, APRIL, 4))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2016, holySaturday()), is(equalTo(LocalDate.of(2016, MARCH, 26))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2017, holySaturday()), is(equalTo(LocalDate.of(2017, APRIL, 15))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2018, holySaturday()), is(equalTo(LocalDate.of(2018, MARCH, 31))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2019, holySaturday()), is(equalTo(LocalDate.of(2019, APRIL, 20))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2020, holySaturday()), is(equalTo(LocalDate.of(2020, APRIL, 11))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2021, holySaturday()), is(equalTo(LocalDate.of(2021, APRIL, 3))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2022, holySaturday()), is(equalTo(LocalDate.of(2022, APRIL, 16))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2023, holySaturday()), is(equalTo(LocalDate.of(2023, APRIL, 8))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2024, holySaturday()), is(equalTo(LocalDate.of(2024, MARCH, 30))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2025, holySaturday()), is(equalTo(LocalDate.of(2025, APRIL, 19))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2026, holySaturday()), is(equalTo(LocalDate.of(2026, APRIL, 4))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2027, holySaturday()), is(equalTo(LocalDate.of(2027, MARCH, 27))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2028, holySaturday()), is(equalTo(LocalDate.of(2028, APRIL, 15))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2029, holySaturday()), is(equalTo(LocalDate.of(2029, MARCH, 31))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2030, holySaturday()), is(equalTo(LocalDate.of(2030, APRIL, 20))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2031, holySaturday()), is(equalTo(LocalDate.of(2031, APRIL, 12))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2032, holySaturday()), is(equalTo(LocalDate.of(2032, MARCH, 27))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2033, holySaturday()), is(equalTo(LocalDate.of(2033, APRIL, 16))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2034, holySaturday()), is(equalTo(LocalDate.of(2034, APRIL, 8))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2035, holySaturday()), is(equalTo(LocalDate.of(2035, MARCH, 24))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2036, holySaturday()), is(equalTo(LocalDate.of(2036, APRIL, 12))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2037, holySaturday()), is(equalTo(LocalDate.of(2037, APRIL, 4))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2038, holySaturday()), is(equalTo(LocalDate.of(2038, APRIL, 24))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2039, holySaturday()), is(equalTo(LocalDate.of(2039, APRIL, 9))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2040, holySaturday()), is(equalTo(LocalDate.of(2040, MARCH, 31))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2041, holySaturday()), is(equalTo(LocalDate.of(2041, APRIL, 20))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2042, holySaturday()), is(equalTo(LocalDate.of(2042, APRIL, 5))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2043, holySaturday()), is(equalTo(LocalDate.of(2043, MARCH, 28))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2044, holySaturday()), is(equalTo(LocalDate.of(2044, APRIL, 16))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2045, holySaturday()), is(equalTo(LocalDate.of(2045, APRIL, 8))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2046, holySaturday()), is(equalTo(LocalDate.of(2046, MARCH, 24))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2047, holySaturday()), is(equalTo(LocalDate.of(2047, APRIL, 13))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2048, holySaturday()), is(equalTo(LocalDate.of(2048, APRIL, 4))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2049, holySaturday()), is(equalTo(LocalDate.of(2049, APRIL, 17))));
	}

	@Test
	public void testHolyWednesday() {
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2000, holyWednesday()), is(equalTo(LocalDate.of(2000, APRIL, 19))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2001, holyWednesday()), is(equalTo(LocalDate.of(2001, APRIL, 11))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2002, holyWednesday()), is(equalTo(LocalDate.of(2002, MARCH, 27))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2003, holyWednesday()), is(equalTo(LocalDate.of(2003, APRIL, 16))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2004, holyWednesday()), is(equalTo(LocalDate.of(2004, APRIL, 7))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2005, holyWednesday()), is(equalTo(LocalDate.of(2005, MARCH, 23))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2006, holyWednesday()), is(equalTo(LocalDate.of(2006, APRIL, 12))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2007, holyWednesday()), is(equalTo(LocalDate.of(2007, APRIL, 4))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2008, holyWednesday()), is(equalTo(LocalDate.of(2008, MARCH, 19))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2009, holyWednesday()), is(equalTo(LocalDate.of(2009, APRIL, 8))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2010, holyWednesday()), is(equalTo(LocalDate.of(2010, MARCH, 31))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2011, holyWednesday()), is(equalTo(LocalDate.of(2011, APRIL, 20))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2012, holyWednesday()), is(equalTo(LocalDate.of(2012, APRIL, 4))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2013, holyWednesday()), is(equalTo(LocalDate.of(2013, MARCH, 27))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2014, holyWednesday()), is(equalTo(LocalDate.of(2014, APRIL, 16))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2015, holyWednesday()), is(equalTo(LocalDate.of(2015, APRIL, 1))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2016, holyWednesday()), is(equalTo(LocalDate.of(2016, MARCH, 23))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2017, holyWednesday()), is(equalTo(LocalDate.of(2017, APRIL, 12))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2018, holyWednesday()), is(equalTo(LocalDate.of(2018, MARCH, 28))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2019, holyWednesday()), is(equalTo(LocalDate.of(2019, APRIL, 17))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2020, holyWednesday()), is(equalTo(LocalDate.of(2020, APRIL, 8))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2021, holyWednesday()), is(equalTo(LocalDate.of(2021, MARCH, 31))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2022, holyWednesday()), is(equalTo(LocalDate.of(2022, APRIL, 13))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2023, holyWednesday()), is(equalTo(LocalDate.of(2023, APRIL, 5))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2024, holyWednesday()), is(equalTo(LocalDate.of(2024, MARCH, 27))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2025, holyWednesday()), is(equalTo(LocalDate.of(2025, APRIL, 16))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2026, holyWednesday()), is(equalTo(LocalDate.of(2026, APRIL, 1))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2027, holyWednesday()), is(equalTo(LocalDate.of(2027, MARCH, 24))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2028, holyWednesday()), is(equalTo(LocalDate.of(2028, APRIL, 12))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2029, holyWednesday()), is(equalTo(LocalDate.of(2029, MARCH, 28))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2030, holyWednesday()), is(equalTo(LocalDate.of(2030, APRIL, 17))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2031, holyWednesday()), is(equalTo(LocalDate.of(2031, APRIL, 9))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2032, holyWednesday()), is(equalTo(LocalDate.of(2032, MARCH, 24))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2033, holyWednesday()), is(equalTo(LocalDate.of(2033, APRIL, 13))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2034, holyWednesday()), is(equalTo(LocalDate.of(2034, APRIL, 5))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2035, holyWednesday()), is(equalTo(LocalDate.of(2035, MARCH, 21))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2036, holyWednesday()), is(equalTo(LocalDate.of(2036, APRIL, 9))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2037, holyWednesday()), is(equalTo(LocalDate.of(2037, APRIL, 1))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2038, holyWednesday()), is(equalTo(LocalDate.of(2038, APRIL, 21))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2039, holyWednesday()), is(equalTo(LocalDate.of(2039, APRIL, 6))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2040, holyWednesday()), is(equalTo(LocalDate.of(2040, MARCH, 28))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2041, holyWednesday()), is(equalTo(LocalDate.of(2041, APRIL, 17))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2042, holyWednesday()), is(equalTo(LocalDate.of(2042, APRIL, 2))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2043, holyWednesday()), is(equalTo(LocalDate.of(2043, MARCH, 25))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2044, holyWednesday()), is(equalTo(LocalDate.of(2044, APRIL, 13))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2045, holyWednesday()), is(equalTo(LocalDate.of(2045, APRIL, 5))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2046, holyWednesday()), is(equalTo(LocalDate.of(2046, MARCH, 21))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2047, holyWednesday()), is(equalTo(LocalDate.of(2047, APRIL, 10))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2048, holyWednesday()), is(equalTo(LocalDate.of(2048, APRIL, 1))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2049, holyWednesday()), is(equalTo(LocalDate.of(2049, APRIL, 14))));
	}

	@Test
	public void testMaundyThursday() {
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2000, maundyThursday()), is(equalTo(LocalDate.of(2000, APRIL, 20))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2001, maundyThursday()), is(equalTo(LocalDate.of(2001, APRIL, 12))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2002, maundyThursday()), is(equalTo(LocalDate.of(2002, MARCH, 28))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2003, maundyThursday()), is(equalTo(LocalDate.of(2003, APRIL, 17))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2004, maundyThursday()), is(equalTo(LocalDate.of(2004, APRIL, 8))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2005, maundyThursday()), is(equalTo(LocalDate.of(2005, MARCH, 24))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2006, maundyThursday()), is(equalTo(LocalDate.of(2006, APRIL, 13))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2007, maundyThursday()), is(equalTo(LocalDate.of(2007, APRIL, 5))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2008, maundyThursday()), is(equalTo(LocalDate.of(2008, MARCH, 20))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2009, maundyThursday()), is(equalTo(LocalDate.of(2009, APRIL, 9))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2010, maundyThursday()), is(equalTo(LocalDate.of(2010, APRIL, 1))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2011, maundyThursday()), is(equalTo(LocalDate.of(2011, APRIL, 21))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2012, maundyThursday()), is(equalTo(LocalDate.of(2012, APRIL, 5))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2013, maundyThursday()), is(equalTo(LocalDate.of(2013, MARCH, 28))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2014, maundyThursday()), is(equalTo(LocalDate.of(2014, APRIL, 17))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2015, maundyThursday()), is(equalTo(LocalDate.of(2015, APRIL, 2))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2016, maundyThursday()), is(equalTo(LocalDate.of(2016, MARCH, 24))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2017, maundyThursday()), is(equalTo(LocalDate.of(2017, APRIL, 13))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2018, maundyThursday()), is(equalTo(LocalDate.of(2018, MARCH, 29))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2019, maundyThursday()), is(equalTo(LocalDate.of(2019, APRIL, 18))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2020, maundyThursday()), is(equalTo(LocalDate.of(2020, APRIL, 9))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2021, maundyThursday()), is(equalTo(LocalDate.of(2021, APRIL, 1))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2022, maundyThursday()), is(equalTo(LocalDate.of(2022, APRIL, 14))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2023, maundyThursday()), is(equalTo(LocalDate.of(2023, APRIL, 6))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2024, maundyThursday()), is(equalTo(LocalDate.of(2024, MARCH, 28))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2025, maundyThursday()), is(equalTo(LocalDate.of(2025, APRIL, 17))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2026, maundyThursday()), is(equalTo(LocalDate.of(2026, APRIL, 2))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2027, maundyThursday()), is(equalTo(LocalDate.of(2027, MARCH, 25))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2028, maundyThursday()), is(equalTo(LocalDate.of(2028, APRIL, 13))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2029, maundyThursday()), is(equalTo(LocalDate.of(2029, MARCH, 29))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2030, maundyThursday()), is(equalTo(LocalDate.of(2030, APRIL, 18))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2031, maundyThursday()), is(equalTo(LocalDate.of(2031, APRIL, 10))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2032, maundyThursday()), is(equalTo(LocalDate.of(2032, MARCH, 25))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2033, maundyThursday()), is(equalTo(LocalDate.of(2033, APRIL, 14))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2034, maundyThursday()), is(equalTo(LocalDate.of(2034, APRIL, 6))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2035, maundyThursday()), is(equalTo(LocalDate.of(2035, MARCH, 22))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2036, maundyThursday()), is(equalTo(LocalDate.of(2036, APRIL, 10))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2037, maundyThursday()), is(equalTo(LocalDate.of(2037, APRIL, 2))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2038, maundyThursday()), is(equalTo(LocalDate.of(2038, APRIL, 22))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2039, maundyThursday()), is(equalTo(LocalDate.of(2039, APRIL, 7))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2040, maundyThursday()), is(equalTo(LocalDate.of(2040, MARCH, 29))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2041, maundyThursday()), is(equalTo(LocalDate.of(2041, APRIL, 18))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2042, maundyThursday()), is(equalTo(LocalDate.of(2042, APRIL, 3))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2043, maundyThursday()), is(equalTo(LocalDate.of(2043, MARCH, 26))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2044, maundyThursday()), is(equalTo(LocalDate.of(2044, APRIL, 14))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2045, maundyThursday()), is(equalTo(LocalDate.of(2045, APRIL, 6))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2046, maundyThursday()), is(equalTo(LocalDate.of(2046, MARCH, 22))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2047, maundyThursday()), is(equalTo(LocalDate.of(2047, APRIL, 11))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2048, maundyThursday()), is(equalTo(LocalDate.of(2048, APRIL, 2))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2049, maundyThursday()), is(equalTo(LocalDate.of(2049, APRIL, 15))));
	}

	@Test
	public void testOrthodoxAllSaintsDay() {
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2000, orthodoxAllSaintsDay()), is(equalTo(LocalDate.of(2000, JUNE, 25))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2001, orthodoxAllSaintsDay()), is(equalTo(LocalDate.of(2001, JUNE, 10))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2002, orthodoxAllSaintsDay()), is(equalTo(LocalDate.of(2002, JUNE, 30))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2003, orthodoxAllSaintsDay()), is(equalTo(LocalDate.of(2003, JUNE, 22))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2004, orthodoxAllSaintsDay()), is(equalTo(LocalDate.of(2004, JUNE, 6))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2005, orthodoxAllSaintsDay()), is(equalTo(LocalDate.of(2005, JUNE, 26))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2006, orthodoxAllSaintsDay()), is(equalTo(LocalDate.of(2006, JUNE, 18))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2007, orthodoxAllSaintsDay()), is(equalTo(LocalDate.of(2007, JUNE, 3))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2008, orthodoxAllSaintsDay()), is(equalTo(LocalDate.of(2008, JUNE, 22))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2009, orthodoxAllSaintsDay()), is(equalTo(LocalDate.of(2009, JUNE, 14))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2010, orthodoxAllSaintsDay()), is(equalTo(LocalDate.of(2010, MAY, 30))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2011, orthodoxAllSaintsDay()), is(equalTo(LocalDate.of(2011, JUNE, 19))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2012, orthodoxAllSaintsDay()), is(equalTo(LocalDate.of(2012, JUNE, 10))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2013, orthodoxAllSaintsDay()), is(equalTo(LocalDate.of(2013, JUNE, 30))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2014, orthodoxAllSaintsDay()), is(equalTo(LocalDate.of(2014, JUNE, 15))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2015, orthodoxAllSaintsDay()), is(equalTo(LocalDate.of(2015, JUNE, 7))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2016, orthodoxAllSaintsDay()), is(equalTo(LocalDate.of(2016, JUNE, 26))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2017, orthodoxAllSaintsDay()), is(equalTo(LocalDate.of(2017, JUNE, 11))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2018, orthodoxAllSaintsDay()), is(equalTo(LocalDate.of(2018, JUNE, 3))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2019, orthodoxAllSaintsDay()), is(equalTo(LocalDate.of(2019, JUNE, 23))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2020, orthodoxAllSaintsDay()), is(equalTo(LocalDate.of(2020, JUNE, 14))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2021, orthodoxAllSaintsDay()), is(equalTo(LocalDate.of(2021, JUNE, 27))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2022, orthodoxAllSaintsDay()), is(equalTo(LocalDate.of(2022, JUNE, 19))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2023, orthodoxAllSaintsDay()), is(equalTo(LocalDate.of(2023, JUNE, 11))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2024, orthodoxAllSaintsDay()), is(equalTo(LocalDate.of(2024, JUNE, 30))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2025, orthodoxAllSaintsDay()), is(equalTo(LocalDate.of(2025, JUNE, 15))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2026, orthodoxAllSaintsDay()), is(equalTo(LocalDate.of(2026, JUNE, 7))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2027, orthodoxAllSaintsDay()), is(equalTo(LocalDate.of(2027, JUNE, 27))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2028, orthodoxAllSaintsDay()), is(equalTo(LocalDate.of(2028, JUNE, 11))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2029, orthodoxAllSaintsDay()), is(equalTo(LocalDate.of(2029, JUNE, 3))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2030, orthodoxAllSaintsDay()), is(equalTo(LocalDate.of(2030, JUNE, 23))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2031, orthodoxAllSaintsDay()), is(equalTo(LocalDate.of(2031, JUNE, 8))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2032, orthodoxAllSaintsDay()), is(equalTo(LocalDate.of(2032, JUNE, 27))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2033, orthodoxAllSaintsDay()), is(equalTo(LocalDate.of(2033, JUNE, 19))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2034, orthodoxAllSaintsDay()), is(equalTo(LocalDate.of(2034, JUNE, 4))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2035, orthodoxAllSaintsDay()), is(equalTo(LocalDate.of(2035, JUNE, 24))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2036, orthodoxAllSaintsDay()), is(equalTo(LocalDate.of(2036, JUNE, 15))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2037, orthodoxAllSaintsDay()), is(equalTo(LocalDate.of(2037, MAY, 31))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2038, orthodoxAllSaintsDay()), is(equalTo(LocalDate.of(2038, JUNE, 20))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2039, orthodoxAllSaintsDay()), is(equalTo(LocalDate.of(2039, JUNE, 12))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2040, orthodoxAllSaintsDay()), is(equalTo(LocalDate.of(2040, JULY, 1))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2041, orthodoxAllSaintsDay()), is(equalTo(LocalDate.of(2041, JUNE, 16))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2042, orthodoxAllSaintsDay()), is(equalTo(LocalDate.of(2042, JUNE, 8))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2043, orthodoxAllSaintsDay()), is(equalTo(LocalDate.of(2043, JUNE, 28))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2044, orthodoxAllSaintsDay()), is(equalTo(LocalDate.of(2044, JUNE, 19))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2045, orthodoxAllSaintsDay()), is(equalTo(LocalDate.of(2045, JUNE, 4))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2046, orthodoxAllSaintsDay()), is(equalTo(LocalDate.of(2046, JUNE, 24))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2047, orthodoxAllSaintsDay()), is(equalTo(LocalDate.of(2047, JUNE, 16))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2048, orthodoxAllSaintsDay()), is(equalTo(LocalDate.of(2048, MAY, 31))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2049, orthodoxAllSaintsDay()), is(equalTo(LocalDate.of(2049, JUNE, 20))));
	}

	@Test
	public void testOrthodoxAscensionThursday() {
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2000, orthodoxAscensionThursday()), is(equalTo(LocalDate.of(2000, JUNE, 8))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2001, orthodoxAscensionThursday()), is(equalTo(LocalDate.of(2001, MAY, 24))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2002, orthodoxAscensionThursday()), is(equalTo(LocalDate.of(2002, JUNE, 13))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2003, orthodoxAscensionThursday()), is(equalTo(LocalDate.of(2003, JUNE, 5))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2004, orthodoxAscensionThursday()), is(equalTo(LocalDate.of(2004, MAY, 20))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2005, orthodoxAscensionThursday()), is(equalTo(LocalDate.of(2005, JUNE, 9))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2006, orthodoxAscensionThursday()), is(equalTo(LocalDate.of(2006, JUNE, 1))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2007, orthodoxAscensionThursday()), is(equalTo(LocalDate.of(2007, MAY, 17))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2008, orthodoxAscensionThursday()), is(equalTo(LocalDate.of(2008, JUNE, 5))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2009, orthodoxAscensionThursday()), is(equalTo(LocalDate.of(2009, MAY, 28))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2010, orthodoxAscensionThursday()), is(equalTo(LocalDate.of(2010, MAY, 13))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2011, orthodoxAscensionThursday()), is(equalTo(LocalDate.of(2011, JUNE, 2))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2012, orthodoxAscensionThursday()), is(equalTo(LocalDate.of(2012, MAY, 24))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2013, orthodoxAscensionThursday()), is(equalTo(LocalDate.of(2013, JUNE, 13))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2014, orthodoxAscensionThursday()), is(equalTo(LocalDate.of(2014, MAY, 29))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2015, orthodoxAscensionThursday()), is(equalTo(LocalDate.of(2015, MAY, 21))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2016, orthodoxAscensionThursday()), is(equalTo(LocalDate.of(2016, JUNE, 9))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2017, orthodoxAscensionThursday()), is(equalTo(LocalDate.of(2017, MAY, 25))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2018, orthodoxAscensionThursday()), is(equalTo(LocalDate.of(2018, MAY, 17))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2019, orthodoxAscensionThursday()), is(equalTo(LocalDate.of(2019, JUNE, 6))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2020, orthodoxAscensionThursday()), is(equalTo(LocalDate.of(2020, MAY, 28))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2021, orthodoxAscensionThursday()), is(equalTo(LocalDate.of(2021, JUNE, 10))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2022, orthodoxAscensionThursday()), is(equalTo(LocalDate.of(2022, JUNE, 2))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2023, orthodoxAscensionThursday()), is(equalTo(LocalDate.of(2023, MAY, 25))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2024, orthodoxAscensionThursday()), is(equalTo(LocalDate.of(2024, JUNE, 13))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2025, orthodoxAscensionThursday()), is(equalTo(LocalDate.of(2025, MAY, 29))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2026, orthodoxAscensionThursday()), is(equalTo(LocalDate.of(2026, MAY, 21))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2027, orthodoxAscensionThursday()), is(equalTo(LocalDate.of(2027, JUNE, 10))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2028, orthodoxAscensionThursday()), is(equalTo(LocalDate.of(2028, MAY, 25))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2029, orthodoxAscensionThursday()), is(equalTo(LocalDate.of(2029, MAY, 17))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2030, orthodoxAscensionThursday()), is(equalTo(LocalDate.of(2030, JUNE, 6))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2031, orthodoxAscensionThursday()), is(equalTo(LocalDate.of(2031, MAY, 22))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2032, orthodoxAscensionThursday()), is(equalTo(LocalDate.of(2032, JUNE, 10))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2033, orthodoxAscensionThursday()), is(equalTo(LocalDate.of(2033, JUNE, 2))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2034, orthodoxAscensionThursday()), is(equalTo(LocalDate.of(2034, MAY, 18))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2035, orthodoxAscensionThursday()), is(equalTo(LocalDate.of(2035, JUNE, 7))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2036, orthodoxAscensionThursday()), is(equalTo(LocalDate.of(2036, MAY, 29))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2037, orthodoxAscensionThursday()), is(equalTo(LocalDate.of(2037, MAY, 14))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2038, orthodoxAscensionThursday()), is(equalTo(LocalDate.of(2038, JUNE, 3))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2039, orthodoxAscensionThursday()), is(equalTo(LocalDate.of(2039, MAY, 26))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2040, orthodoxAscensionThursday()), is(equalTo(LocalDate.of(2040, JUNE, 14))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2041, orthodoxAscensionThursday()), is(equalTo(LocalDate.of(2041, MAY, 30))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2042, orthodoxAscensionThursday()), is(equalTo(LocalDate.of(2042, MAY, 22))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2043, orthodoxAscensionThursday()), is(equalTo(LocalDate.of(2043, JUNE, 11))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2044, orthodoxAscensionThursday()), is(equalTo(LocalDate.of(2044, JUNE, 2))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2045, orthodoxAscensionThursday()), is(equalTo(LocalDate.of(2045, MAY, 18))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2046, orthodoxAscensionThursday()), is(equalTo(LocalDate.of(2046, JUNE, 7))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2047, orthodoxAscensionThursday()), is(equalTo(LocalDate.of(2047, MAY, 30))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2048, orthodoxAscensionThursday()), is(equalTo(LocalDate.of(2048, MAY, 14))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2049, orthodoxAscensionThursday()), is(equalTo(LocalDate.of(2049, JUNE, 3))));
	}

	@Test
	public void testOrthodoxEasterMonday() {
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2000, orthodoxEasterMonday()), is(equalTo(LocalDate.of(2000, MAY, 1))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2001, orthodoxEasterMonday()), is(equalTo(LocalDate.of(2001, APRIL, 16))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2002, orthodoxEasterMonday()), is(equalTo(LocalDate.of(2002, MAY, 6))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2003, orthodoxEasterMonday()), is(equalTo(LocalDate.of(2003, APRIL, 28))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2004, orthodoxEasterMonday()), is(equalTo(LocalDate.of(2004, APRIL, 12))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2005, orthodoxEasterMonday()), is(equalTo(LocalDate.of(2005, MAY, 2))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2006, orthodoxEasterMonday()), is(equalTo(LocalDate.of(2006, APRIL, 24))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2007, orthodoxEasterMonday()), is(equalTo(LocalDate.of(2007, APRIL, 9))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2008, orthodoxEasterMonday()), is(equalTo(LocalDate.of(2008, APRIL, 28))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2009, orthodoxEasterMonday()), is(equalTo(LocalDate.of(2009, APRIL, 20))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2010, orthodoxEasterMonday()), is(equalTo(LocalDate.of(2010, APRIL, 5))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2011, orthodoxEasterMonday()), is(equalTo(LocalDate.of(2011, APRIL, 25))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2012, orthodoxEasterMonday()), is(equalTo(LocalDate.of(2012, APRIL, 16))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2013, orthodoxEasterMonday()), is(equalTo(LocalDate.of(2013, MAY, 6))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2014, orthodoxEasterMonday()), is(equalTo(LocalDate.of(2014, APRIL, 21))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2015, orthodoxEasterMonday()), is(equalTo(LocalDate.of(2015, APRIL, 13))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2016, orthodoxEasterMonday()), is(equalTo(LocalDate.of(2016, MAY, 2))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2017, orthodoxEasterMonday()), is(equalTo(LocalDate.of(2017, APRIL, 17))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2018, orthodoxEasterMonday()), is(equalTo(LocalDate.of(2018, APRIL, 9))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2019, orthodoxEasterMonday()), is(equalTo(LocalDate.of(2019, APRIL, 29))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2020, orthodoxEasterMonday()), is(equalTo(LocalDate.of(2020, APRIL, 20))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2021, orthodoxEasterMonday()), is(equalTo(LocalDate.of(2021, MAY, 3))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2022, orthodoxEasterMonday()), is(equalTo(LocalDate.of(2022, APRIL, 25))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2023, orthodoxEasterMonday()), is(equalTo(LocalDate.of(2023, APRIL, 17))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2024, orthodoxEasterMonday()), is(equalTo(LocalDate.of(2024, MAY, 6))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2025, orthodoxEasterMonday()), is(equalTo(LocalDate.of(2025, APRIL, 21))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2026, orthodoxEasterMonday()), is(equalTo(LocalDate.of(2026, APRIL, 13))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2027, orthodoxEasterMonday()), is(equalTo(LocalDate.of(2027, MAY, 3))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2028, orthodoxEasterMonday()), is(equalTo(LocalDate.of(2028, APRIL, 17))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2029, orthodoxEasterMonday()), is(equalTo(LocalDate.of(2029, APRIL, 9))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2030, orthodoxEasterMonday()), is(equalTo(LocalDate.of(2030, APRIL, 29))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2031, orthodoxEasterMonday()), is(equalTo(LocalDate.of(2031, APRIL, 14))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2032, orthodoxEasterMonday()), is(equalTo(LocalDate.of(2032, MAY, 3))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2033, orthodoxEasterMonday()), is(equalTo(LocalDate.of(2033, APRIL, 25))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2034, orthodoxEasterMonday()), is(equalTo(LocalDate.of(2034, APRIL, 10))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2035, orthodoxEasterMonday()), is(equalTo(LocalDate.of(2035, APRIL, 30))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2036, orthodoxEasterMonday()), is(equalTo(LocalDate.of(2036, APRIL, 21))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2037, orthodoxEasterMonday()), is(equalTo(LocalDate.of(2037, APRIL, 6))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2038, orthodoxEasterMonday()), is(equalTo(LocalDate.of(2038, APRIL, 26))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2039, orthodoxEasterMonday()), is(equalTo(LocalDate.of(2039, APRIL, 18))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2040, orthodoxEasterMonday()), is(equalTo(LocalDate.of(2040, MAY, 7))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2041, orthodoxEasterMonday()), is(equalTo(LocalDate.of(2041, APRIL, 22))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2042, orthodoxEasterMonday()), is(equalTo(LocalDate.of(2042, APRIL, 14))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2043, orthodoxEasterMonday()), is(equalTo(LocalDate.of(2043, MAY, 4))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2044, orthodoxEasterMonday()), is(equalTo(LocalDate.of(2044, APRIL, 25))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2045, orthodoxEasterMonday()), is(equalTo(LocalDate.of(2045, APRIL, 10))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2046, orthodoxEasterMonday()), is(equalTo(LocalDate.of(2046, APRIL, 30))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2047, orthodoxEasterMonday()), is(equalTo(LocalDate.of(2047, APRIL, 22))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2048, orthodoxEasterMonday()), is(equalTo(LocalDate.of(2048, APRIL, 6))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2049, orthodoxEasterMonday()), is(equalTo(LocalDate.of(2049, APRIL, 26))));
	}

	@Test
	public void testOrthodoxGoodFriday() {
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2000, orthodoxGoodFriday()), is(equalTo(LocalDate.of(2000, APRIL, 28))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2001, orthodoxGoodFriday()), is(equalTo(LocalDate.of(2001, APRIL, 13))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2002, orthodoxGoodFriday()), is(equalTo(LocalDate.of(2002, MAY, 3))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2003, orthodoxGoodFriday()), is(equalTo(LocalDate.of(2003, APRIL, 25))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2004, orthodoxGoodFriday()), is(equalTo(LocalDate.of(2004, APRIL, 9))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2005, orthodoxGoodFriday()), is(equalTo(LocalDate.of(2005, APRIL, 29))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2006, orthodoxGoodFriday()), is(equalTo(LocalDate.of(2006, APRIL, 21))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2007, orthodoxGoodFriday()), is(equalTo(LocalDate.of(2007, APRIL, 6))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2008, orthodoxGoodFriday()), is(equalTo(LocalDate.of(2008, APRIL, 25))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2009, orthodoxGoodFriday()), is(equalTo(LocalDate.of(2009, APRIL, 17))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2010, orthodoxGoodFriday()), is(equalTo(LocalDate.of(2010, APRIL, 2))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2011, orthodoxGoodFriday()), is(equalTo(LocalDate.of(2011, APRIL, 22))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2012, orthodoxGoodFriday()), is(equalTo(LocalDate.of(2012, APRIL, 13))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2013, orthodoxGoodFriday()), is(equalTo(LocalDate.of(2013, MAY, 3))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2014, orthodoxGoodFriday()), is(equalTo(LocalDate.of(2014, APRIL, 18))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2015, orthodoxGoodFriday()), is(equalTo(LocalDate.of(2015, APRIL, 10))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2016, orthodoxGoodFriday()), is(equalTo(LocalDate.of(2016, APRIL, 29))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2017, orthodoxGoodFriday()), is(equalTo(LocalDate.of(2017, APRIL, 14))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2018, orthodoxGoodFriday()), is(equalTo(LocalDate.of(2018, APRIL, 6))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2019, orthodoxGoodFriday()), is(equalTo(LocalDate.of(2019, APRIL, 26))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2020, orthodoxGoodFriday()), is(equalTo(LocalDate.of(2020, APRIL, 17))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2021, orthodoxGoodFriday()), is(equalTo(LocalDate.of(2021, APRIL, 30))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2022, orthodoxGoodFriday()), is(equalTo(LocalDate.of(2022, APRIL, 22))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2023, orthodoxGoodFriday()), is(equalTo(LocalDate.of(2023, APRIL, 14))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2024, orthodoxGoodFriday()), is(equalTo(LocalDate.of(2024, MAY, 3))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2025, orthodoxGoodFriday()), is(equalTo(LocalDate.of(2025, APRIL, 18))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2026, orthodoxGoodFriday()), is(equalTo(LocalDate.of(2026, APRIL, 10))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2027, orthodoxGoodFriday()), is(equalTo(LocalDate.of(2027, APRIL, 30))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2028, orthodoxGoodFriday()), is(equalTo(LocalDate.of(2028, APRIL, 14))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2029, orthodoxGoodFriday()), is(equalTo(LocalDate.of(2029, APRIL, 6))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2030, orthodoxGoodFriday()), is(equalTo(LocalDate.of(2030, APRIL, 26))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2031, orthodoxGoodFriday()), is(equalTo(LocalDate.of(2031, APRIL, 11))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2032, orthodoxGoodFriday()), is(equalTo(LocalDate.of(2032, APRIL, 30))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2033, orthodoxGoodFriday()), is(equalTo(LocalDate.of(2033, APRIL, 22))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2034, orthodoxGoodFriday()), is(equalTo(LocalDate.of(2034, APRIL, 7))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2035, orthodoxGoodFriday()), is(equalTo(LocalDate.of(2035, APRIL, 27))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2036, orthodoxGoodFriday()), is(equalTo(LocalDate.of(2036, APRIL, 18))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2037, orthodoxGoodFriday()), is(equalTo(LocalDate.of(2037, APRIL, 3))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2038, orthodoxGoodFriday()), is(equalTo(LocalDate.of(2038, APRIL, 23))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2039, orthodoxGoodFriday()), is(equalTo(LocalDate.of(2039, APRIL, 15))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2040, orthodoxGoodFriday()), is(equalTo(LocalDate.of(2040, MAY, 4))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2041, orthodoxGoodFriday()), is(equalTo(LocalDate.of(2041, APRIL, 19))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2042, orthodoxGoodFriday()), is(equalTo(LocalDate.of(2042, APRIL, 11))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2043, orthodoxGoodFriday()), is(equalTo(LocalDate.of(2043, MAY, 1))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2044, orthodoxGoodFriday()), is(equalTo(LocalDate.of(2044, APRIL, 22))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2045, orthodoxGoodFriday()), is(equalTo(LocalDate.of(2045, APRIL, 7))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2046, orthodoxGoodFriday()), is(equalTo(LocalDate.of(2046, APRIL, 27))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2047, orthodoxGoodFriday()), is(equalTo(LocalDate.of(2047, APRIL, 19))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2048, orthodoxGoodFriday()), is(equalTo(LocalDate.of(2048, APRIL, 3))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2049, orthodoxGoodFriday()), is(equalTo(LocalDate.of(2049, APRIL, 23))));
	}

	@Test
	public void testOrthodoxHolySaturday() {
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2000, orthodoxHolySaturday()), is(equalTo(LocalDate.of(2000, APRIL, 29))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2001, orthodoxHolySaturday()), is(equalTo(LocalDate.of(2001, APRIL, 14))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2002, orthodoxHolySaturday()), is(equalTo(LocalDate.of(2002, MAY, 4))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2003, orthodoxHolySaturday()), is(equalTo(LocalDate.of(2003, APRIL, 26))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2004, orthodoxHolySaturday()), is(equalTo(LocalDate.of(2004, APRIL, 10))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2005, orthodoxHolySaturday()), is(equalTo(LocalDate.of(2005, APRIL, 30))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2006, orthodoxHolySaturday()), is(equalTo(LocalDate.of(2006, APRIL, 22))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2007, orthodoxHolySaturday()), is(equalTo(LocalDate.of(2007, APRIL, 7))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2008, orthodoxHolySaturday()), is(equalTo(LocalDate.of(2008, APRIL, 26))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2009, orthodoxHolySaturday()), is(equalTo(LocalDate.of(2009, APRIL, 18))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2010, orthodoxHolySaturday()), is(equalTo(LocalDate.of(2010, APRIL, 3))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2011, orthodoxHolySaturday()), is(equalTo(LocalDate.of(2011, APRIL, 23))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2012, orthodoxHolySaturday()), is(equalTo(LocalDate.of(2012, APRIL, 14))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2013, orthodoxHolySaturday()), is(equalTo(LocalDate.of(2013, MAY, 4))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2014, orthodoxHolySaturday()), is(equalTo(LocalDate.of(2014, APRIL, 19))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2015, orthodoxHolySaturday()), is(equalTo(LocalDate.of(2015, APRIL, 11))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2016, orthodoxHolySaturday()), is(equalTo(LocalDate.of(2016, APRIL, 30))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2017, orthodoxHolySaturday()), is(equalTo(LocalDate.of(2017, APRIL, 15))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2018, orthodoxHolySaturday()), is(equalTo(LocalDate.of(2018, APRIL, 7))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2019, orthodoxHolySaturday()), is(equalTo(LocalDate.of(2019, APRIL, 27))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2020, orthodoxHolySaturday()), is(equalTo(LocalDate.of(2020, APRIL, 18))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2021, orthodoxHolySaturday()), is(equalTo(LocalDate.of(2021, MAY, 1))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2022, orthodoxHolySaturday()), is(equalTo(LocalDate.of(2022, APRIL, 23))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2023, orthodoxHolySaturday()), is(equalTo(LocalDate.of(2023, APRIL, 15))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2024, orthodoxHolySaturday()), is(equalTo(LocalDate.of(2024, MAY, 4))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2025, orthodoxHolySaturday()), is(equalTo(LocalDate.of(2025, APRIL, 19))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2026, orthodoxHolySaturday()), is(equalTo(LocalDate.of(2026, APRIL, 11))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2027, orthodoxHolySaturday()), is(equalTo(LocalDate.of(2027, MAY, 1))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2028, orthodoxHolySaturday()), is(equalTo(LocalDate.of(2028, APRIL, 15))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2029, orthodoxHolySaturday()), is(equalTo(LocalDate.of(2029, APRIL, 7))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2030, orthodoxHolySaturday()), is(equalTo(LocalDate.of(2030, APRIL, 27))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2031, orthodoxHolySaturday()), is(equalTo(LocalDate.of(2031, APRIL, 12))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2032, orthodoxHolySaturday()), is(equalTo(LocalDate.of(2032, MAY, 1))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2033, orthodoxHolySaturday()), is(equalTo(LocalDate.of(2033, APRIL, 23))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2034, orthodoxHolySaturday()), is(equalTo(LocalDate.of(2034, APRIL, 8))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2035, orthodoxHolySaturday()), is(equalTo(LocalDate.of(2035, APRIL, 28))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2036, orthodoxHolySaturday()), is(equalTo(LocalDate.of(2036, APRIL, 19))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2037, orthodoxHolySaturday()), is(equalTo(LocalDate.of(2037, APRIL, 4))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2038, orthodoxHolySaturday()), is(equalTo(LocalDate.of(2038, APRIL, 24))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2039, orthodoxHolySaturday()), is(equalTo(LocalDate.of(2039, APRIL, 16))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2040, orthodoxHolySaturday()), is(equalTo(LocalDate.of(2040, MAY, 5))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2041, orthodoxHolySaturday()), is(equalTo(LocalDate.of(2041, APRIL, 20))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2042, orthodoxHolySaturday()), is(equalTo(LocalDate.of(2042, APRIL, 12))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2043, orthodoxHolySaturday()), is(equalTo(LocalDate.of(2043, MAY, 2))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2044, orthodoxHolySaturday()), is(equalTo(LocalDate.of(2044, APRIL, 23))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2045, orthodoxHolySaturday()), is(equalTo(LocalDate.of(2045, APRIL, 8))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2046, orthodoxHolySaturday()), is(equalTo(LocalDate.of(2046, APRIL, 28))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2047, orthodoxHolySaturday()), is(equalTo(LocalDate.of(2047, APRIL, 20))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2048, orthodoxHolySaturday()), is(equalTo(LocalDate.of(2048, APRIL, 4))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2049, orthodoxHolySaturday()), is(equalTo(LocalDate.of(2049, APRIL, 24))));
	}

	@Test
	public void testOrthodoxHolyWednesday() {
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2000, orthodoxHolyWednesday()), is(equalTo(LocalDate.of(2000, APRIL, 26))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2001, orthodoxHolyWednesday()), is(equalTo(LocalDate.of(2001, APRIL, 11))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2002, orthodoxHolyWednesday()), is(equalTo(LocalDate.of(2002, MAY, 1))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2003, orthodoxHolyWednesday()), is(equalTo(LocalDate.of(2003, APRIL, 23))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2004, orthodoxHolyWednesday()), is(equalTo(LocalDate.of(2004, APRIL, 7))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2005, orthodoxHolyWednesday()), is(equalTo(LocalDate.of(2005, APRIL, 27))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2006, orthodoxHolyWednesday()), is(equalTo(LocalDate.of(2006, APRIL, 19))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2007, orthodoxHolyWednesday()), is(equalTo(LocalDate.of(2007, APRIL, 4))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2008, orthodoxHolyWednesday()), is(equalTo(LocalDate.of(2008, APRIL, 23))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2009, orthodoxHolyWednesday()), is(equalTo(LocalDate.of(2009, APRIL, 15))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2010, orthodoxHolyWednesday()), is(equalTo(LocalDate.of(2010, MARCH, 31))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2011, orthodoxHolyWednesday()), is(equalTo(LocalDate.of(2011, APRIL, 20))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2012, orthodoxHolyWednesday()), is(equalTo(LocalDate.of(2012, APRIL, 11))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2013, orthodoxHolyWednesday()), is(equalTo(LocalDate.of(2013, MAY, 1))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2014, orthodoxHolyWednesday()), is(equalTo(LocalDate.of(2014, APRIL, 16))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2015, orthodoxHolyWednesday()), is(equalTo(LocalDate.of(2015, APRIL, 8))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2016, orthodoxHolyWednesday()), is(equalTo(LocalDate.of(2016, APRIL, 27))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2017, orthodoxHolyWednesday()), is(equalTo(LocalDate.of(2017, APRIL, 12))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2018, orthodoxHolyWednesday()), is(equalTo(LocalDate.of(2018, APRIL, 4))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2019, orthodoxHolyWednesday()), is(equalTo(LocalDate.of(2019, APRIL, 24))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2020, orthodoxHolyWednesday()), is(equalTo(LocalDate.of(2020, APRIL, 15))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2021, orthodoxHolyWednesday()), is(equalTo(LocalDate.of(2021, APRIL, 28))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2022, orthodoxHolyWednesday()), is(equalTo(LocalDate.of(2022, APRIL, 20))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2023, orthodoxHolyWednesday()), is(equalTo(LocalDate.of(2023, APRIL, 12))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2024, orthodoxHolyWednesday()), is(equalTo(LocalDate.of(2024, MAY, 1))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2025, orthodoxHolyWednesday()), is(equalTo(LocalDate.of(2025, APRIL, 16))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2026, orthodoxHolyWednesday()), is(equalTo(LocalDate.of(2026, APRIL, 8))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2027, orthodoxHolyWednesday()), is(equalTo(LocalDate.of(2027, APRIL, 28))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2028, orthodoxHolyWednesday()), is(equalTo(LocalDate.of(2028, APRIL, 12))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2029, orthodoxHolyWednesday()), is(equalTo(LocalDate.of(2029, APRIL, 4))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2030, orthodoxHolyWednesday()), is(equalTo(LocalDate.of(2030, APRIL, 24))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2031, orthodoxHolyWednesday()), is(equalTo(LocalDate.of(2031, APRIL, 9))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2032, orthodoxHolyWednesday()), is(equalTo(LocalDate.of(2032, APRIL, 28))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2033, orthodoxHolyWednesday()), is(equalTo(LocalDate.of(2033, APRIL, 20))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2034, orthodoxHolyWednesday()), is(equalTo(LocalDate.of(2034, APRIL, 5))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2035, orthodoxHolyWednesday()), is(equalTo(LocalDate.of(2035, APRIL, 25))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2036, orthodoxHolyWednesday()), is(equalTo(LocalDate.of(2036, APRIL, 16))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2037, orthodoxHolyWednesday()), is(equalTo(LocalDate.of(2037, APRIL, 1))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2038, orthodoxHolyWednesday()), is(equalTo(LocalDate.of(2038, APRIL, 21))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2039, orthodoxHolyWednesday()), is(equalTo(LocalDate.of(2039, APRIL, 13))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2040, orthodoxHolyWednesday()), is(equalTo(LocalDate.of(2040, MAY, 2))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2041, orthodoxHolyWednesday()), is(equalTo(LocalDate.of(2041, APRIL, 17))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2042, orthodoxHolyWednesday()), is(equalTo(LocalDate.of(2042, APRIL, 9))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2043, orthodoxHolyWednesday()), is(equalTo(LocalDate.of(2043, APRIL, 29))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2044, orthodoxHolyWednesday()), is(equalTo(LocalDate.of(2044, APRIL, 20))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2045, orthodoxHolyWednesday()), is(equalTo(LocalDate.of(2045, APRIL, 5))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2046, orthodoxHolyWednesday()), is(equalTo(LocalDate.of(2046, APRIL, 25))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2047, orthodoxHolyWednesday()), is(equalTo(LocalDate.of(2047, APRIL, 17))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2048, orthodoxHolyWednesday()), is(equalTo(LocalDate.of(2048, APRIL, 1))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2049, orthodoxHolyWednesday()), is(equalTo(LocalDate.of(2049, APRIL, 21))));
	}

	@Test
	public void testOrthodoxMaundyThursday() {
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2000, orthodoxMaundyThursday()), is(equalTo(LocalDate.of(2000, APRIL, 27))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2001, orthodoxMaundyThursday()), is(equalTo(LocalDate.of(2001, APRIL, 12))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2002, orthodoxMaundyThursday()), is(equalTo(LocalDate.of(2002, MAY, 2))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2003, orthodoxMaundyThursday()), is(equalTo(LocalDate.of(2003, APRIL, 24))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2004, orthodoxMaundyThursday()), is(equalTo(LocalDate.of(2004, APRIL, 8))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2005, orthodoxMaundyThursday()), is(equalTo(LocalDate.of(2005, APRIL, 28))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2006, orthodoxMaundyThursday()), is(equalTo(LocalDate.of(2006, APRIL, 20))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2007, orthodoxMaundyThursday()), is(equalTo(LocalDate.of(2007, APRIL, 5))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2008, orthodoxMaundyThursday()), is(equalTo(LocalDate.of(2008, APRIL, 24))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2009, orthodoxMaundyThursday()), is(equalTo(LocalDate.of(2009, APRIL, 16))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2010, orthodoxMaundyThursday()), is(equalTo(LocalDate.of(2010, APRIL, 1))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2011, orthodoxMaundyThursday()), is(equalTo(LocalDate.of(2011, APRIL, 21))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2012, orthodoxMaundyThursday()), is(equalTo(LocalDate.of(2012, APRIL, 12))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2013, orthodoxMaundyThursday()), is(equalTo(LocalDate.of(2013, MAY, 2))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2014, orthodoxMaundyThursday()), is(equalTo(LocalDate.of(2014, APRIL, 17))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2015, orthodoxMaundyThursday()), is(equalTo(LocalDate.of(2015, APRIL, 9))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2016, orthodoxMaundyThursday()), is(equalTo(LocalDate.of(2016, APRIL, 28))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2017, orthodoxMaundyThursday()), is(equalTo(LocalDate.of(2017, APRIL, 13))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2018, orthodoxMaundyThursday()), is(equalTo(LocalDate.of(2018, APRIL, 5))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2019, orthodoxMaundyThursday()), is(equalTo(LocalDate.of(2019, APRIL, 25))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2020, orthodoxMaundyThursday()), is(equalTo(LocalDate.of(2020, APRIL, 16))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2021, orthodoxMaundyThursday()), is(equalTo(LocalDate.of(2021, APRIL, 29))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2022, orthodoxMaundyThursday()), is(equalTo(LocalDate.of(2022, APRIL, 21))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2023, orthodoxMaundyThursday()), is(equalTo(LocalDate.of(2023, APRIL, 13))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2024, orthodoxMaundyThursday()), is(equalTo(LocalDate.of(2024, MAY, 2))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2025, orthodoxMaundyThursday()), is(equalTo(LocalDate.of(2025, APRIL, 17))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2026, orthodoxMaundyThursday()), is(equalTo(LocalDate.of(2026, APRIL, 9))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2027, orthodoxMaundyThursday()), is(equalTo(LocalDate.of(2027, APRIL, 29))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2028, orthodoxMaundyThursday()), is(equalTo(LocalDate.of(2028, APRIL, 13))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2029, orthodoxMaundyThursday()), is(equalTo(LocalDate.of(2029, APRIL, 5))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2030, orthodoxMaundyThursday()), is(equalTo(LocalDate.of(2030, APRIL, 25))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2031, orthodoxMaundyThursday()), is(equalTo(LocalDate.of(2031, APRIL, 10))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2032, orthodoxMaundyThursday()), is(equalTo(LocalDate.of(2032, APRIL, 29))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2033, orthodoxMaundyThursday()), is(equalTo(LocalDate.of(2033, APRIL, 21))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2034, orthodoxMaundyThursday()), is(equalTo(LocalDate.of(2034, APRIL, 6))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2035, orthodoxMaundyThursday()), is(equalTo(LocalDate.of(2035, APRIL, 26))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2036, orthodoxMaundyThursday()), is(equalTo(LocalDate.of(2036, APRIL, 17))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2037, orthodoxMaundyThursday()), is(equalTo(LocalDate.of(2037, APRIL, 2))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2038, orthodoxMaundyThursday()), is(equalTo(LocalDate.of(2038, APRIL, 22))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2039, orthodoxMaundyThursday()), is(equalTo(LocalDate.of(2039, APRIL, 14))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2040, orthodoxMaundyThursday()), is(equalTo(LocalDate.of(2040, MAY, 3))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2041, orthodoxMaundyThursday()), is(equalTo(LocalDate.of(2041, APRIL, 18))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2042, orthodoxMaundyThursday()), is(equalTo(LocalDate.of(2042, APRIL, 10))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2043, orthodoxMaundyThursday()), is(equalTo(LocalDate.of(2043, APRIL, 30))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2044, orthodoxMaundyThursday()), is(equalTo(LocalDate.of(2044, APRIL, 21))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2045, orthodoxMaundyThursday()), is(equalTo(LocalDate.of(2045, APRIL, 6))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2046, orthodoxMaundyThursday()), is(equalTo(LocalDate.of(2046, APRIL, 26))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2047, orthodoxMaundyThursday()), is(equalTo(LocalDate.of(2047, APRIL, 18))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2048, orthodoxMaundyThursday()), is(equalTo(LocalDate.of(2048, APRIL, 2))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2049, orthodoxMaundyThursday()), is(equalTo(LocalDate.of(2049, APRIL, 22))));
	}

	@Test
	public void testOrthodoxPalmSunday() {
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2000, orthodoxPalmSunday()), is(equalTo(LocalDate.of(2000, APRIL, 23))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2001, orthodoxPalmSunday()), is(equalTo(LocalDate.of(2001, APRIL, 8))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2002, orthodoxPalmSunday()), is(equalTo(LocalDate.of(2002, APRIL, 28))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2003, orthodoxPalmSunday()), is(equalTo(LocalDate.of(2003, APRIL, 20))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2004, orthodoxPalmSunday()), is(equalTo(LocalDate.of(2004, APRIL, 4))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2005, orthodoxPalmSunday()), is(equalTo(LocalDate.of(2005, APRIL, 24))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2006, orthodoxPalmSunday()), is(equalTo(LocalDate.of(2006, APRIL, 16))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2007, orthodoxPalmSunday()), is(equalTo(LocalDate.of(2007, APRIL, 1))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2008, orthodoxPalmSunday()), is(equalTo(LocalDate.of(2008, APRIL, 20))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2009, orthodoxPalmSunday()), is(equalTo(LocalDate.of(2009, APRIL, 12))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2010, orthodoxPalmSunday()), is(equalTo(LocalDate.of(2010, MARCH, 28))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2011, orthodoxPalmSunday()), is(equalTo(LocalDate.of(2011, APRIL, 17))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2012, orthodoxPalmSunday()), is(equalTo(LocalDate.of(2012, APRIL, 8))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2013, orthodoxPalmSunday()), is(equalTo(LocalDate.of(2013, APRIL, 28))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2014, orthodoxPalmSunday()), is(equalTo(LocalDate.of(2014, APRIL, 13))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2015, orthodoxPalmSunday()), is(equalTo(LocalDate.of(2015, APRIL, 5))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2016, orthodoxPalmSunday()), is(equalTo(LocalDate.of(2016, APRIL, 24))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2017, orthodoxPalmSunday()), is(equalTo(LocalDate.of(2017, APRIL, 9))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2018, orthodoxPalmSunday()), is(equalTo(LocalDate.of(2018, APRIL, 1))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2019, orthodoxPalmSunday()), is(equalTo(LocalDate.of(2019, APRIL, 21))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2020, orthodoxPalmSunday()), is(equalTo(LocalDate.of(2020, APRIL, 12))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2021, orthodoxPalmSunday()), is(equalTo(LocalDate.of(2021, APRIL, 25))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2022, orthodoxPalmSunday()), is(equalTo(LocalDate.of(2022, APRIL, 17))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2023, orthodoxPalmSunday()), is(equalTo(LocalDate.of(2023, APRIL, 9))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2024, orthodoxPalmSunday()), is(equalTo(LocalDate.of(2024, APRIL, 28))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2025, orthodoxPalmSunday()), is(equalTo(LocalDate.of(2025, APRIL, 13))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2026, orthodoxPalmSunday()), is(equalTo(LocalDate.of(2026, APRIL, 5))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2027, orthodoxPalmSunday()), is(equalTo(LocalDate.of(2027, APRIL, 25))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2028, orthodoxPalmSunday()), is(equalTo(LocalDate.of(2028, APRIL, 9))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2029, orthodoxPalmSunday()), is(equalTo(LocalDate.of(2029, APRIL, 1))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2030, orthodoxPalmSunday()), is(equalTo(LocalDate.of(2030, APRIL, 21))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2031, orthodoxPalmSunday()), is(equalTo(LocalDate.of(2031, APRIL, 6))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2032, orthodoxPalmSunday()), is(equalTo(LocalDate.of(2032, APRIL, 25))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2033, orthodoxPalmSunday()), is(equalTo(LocalDate.of(2033, APRIL, 17))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2034, orthodoxPalmSunday()), is(equalTo(LocalDate.of(2034, APRIL, 2))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2035, orthodoxPalmSunday()), is(equalTo(LocalDate.of(2035, APRIL, 22))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2036, orthodoxPalmSunday()), is(equalTo(LocalDate.of(2036, APRIL, 13))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2037, orthodoxPalmSunday()), is(equalTo(LocalDate.of(2037, MARCH, 29))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2038, orthodoxPalmSunday()), is(equalTo(LocalDate.of(2038, APRIL, 18))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2039, orthodoxPalmSunday()), is(equalTo(LocalDate.of(2039, APRIL, 10))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2040, orthodoxPalmSunday()), is(equalTo(LocalDate.of(2040, APRIL, 29))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2041, orthodoxPalmSunday()), is(equalTo(LocalDate.of(2041, APRIL, 14))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2042, orthodoxPalmSunday()), is(equalTo(LocalDate.of(2042, APRIL, 6))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2043, orthodoxPalmSunday()), is(equalTo(LocalDate.of(2043, APRIL, 26))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2044, orthodoxPalmSunday()), is(equalTo(LocalDate.of(2044, APRIL, 17))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2045, orthodoxPalmSunday()), is(equalTo(LocalDate.of(2045, APRIL, 2))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2046, orthodoxPalmSunday()), is(equalTo(LocalDate.of(2046, APRIL, 22))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2047, orthodoxPalmSunday()), is(equalTo(LocalDate.of(2047, APRIL, 14))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2048, orthodoxPalmSunday()), is(equalTo(LocalDate.of(2048, MARCH, 29))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2049, orthodoxPalmSunday()), is(equalTo(LocalDate.of(2049, APRIL, 18))));
	}

	@Test
	public void testOrthodoxWhitMonday() {
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2000, orthodoxWhitMonday()), is(equalTo(LocalDate.of(2000, JUNE, 19))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2001, orthodoxWhitMonday()), is(equalTo(LocalDate.of(2001, JUNE, 4))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2002, orthodoxWhitMonday()), is(equalTo(LocalDate.of(2002, JUNE, 24))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2003, orthodoxWhitMonday()), is(equalTo(LocalDate.of(2003, JUNE, 16))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2004, orthodoxWhitMonday()), is(equalTo(LocalDate.of(2004, MAY, 31))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2005, orthodoxWhitMonday()), is(equalTo(LocalDate.of(2005, JUNE, 20))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2006, orthodoxWhitMonday()), is(equalTo(LocalDate.of(2006, JUNE, 12))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2007, orthodoxWhitMonday()), is(equalTo(LocalDate.of(2007, MAY, 28))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2008, orthodoxWhitMonday()), is(equalTo(LocalDate.of(2008, JUNE, 16))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2009, orthodoxWhitMonday()), is(equalTo(LocalDate.of(2009, JUNE, 8))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2010, orthodoxWhitMonday()), is(equalTo(LocalDate.of(2010, MAY, 24))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2011, orthodoxWhitMonday()), is(equalTo(LocalDate.of(2011, JUNE, 13))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2012, orthodoxWhitMonday()), is(equalTo(LocalDate.of(2012, JUNE, 4))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2013, orthodoxWhitMonday()), is(equalTo(LocalDate.of(2013, JUNE, 24))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2014, orthodoxWhitMonday()), is(equalTo(LocalDate.of(2014, JUNE, 9))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2015, orthodoxWhitMonday()), is(equalTo(LocalDate.of(2015, JUNE, 1))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2016, orthodoxWhitMonday()), is(equalTo(LocalDate.of(2016, JUNE, 20))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2017, orthodoxWhitMonday()), is(equalTo(LocalDate.of(2017, JUNE, 5))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2018, orthodoxWhitMonday()), is(equalTo(LocalDate.of(2018, MAY, 28))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2019, orthodoxWhitMonday()), is(equalTo(LocalDate.of(2019, JUNE, 17))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2020, orthodoxWhitMonday()), is(equalTo(LocalDate.of(2020, JUNE, 8))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2021, orthodoxWhitMonday()), is(equalTo(LocalDate.of(2021, JUNE, 21))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2022, orthodoxWhitMonday()), is(equalTo(LocalDate.of(2022, JUNE, 13))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2023, orthodoxWhitMonday()), is(equalTo(LocalDate.of(2023, JUNE, 5))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2024, orthodoxWhitMonday()), is(equalTo(LocalDate.of(2024, JUNE, 24))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2025, orthodoxWhitMonday()), is(equalTo(LocalDate.of(2025, JUNE, 9))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2026, orthodoxWhitMonday()), is(equalTo(LocalDate.of(2026, JUNE, 1))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2027, orthodoxWhitMonday()), is(equalTo(LocalDate.of(2027, JUNE, 21))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2028, orthodoxWhitMonday()), is(equalTo(LocalDate.of(2028, JUNE, 5))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2029, orthodoxWhitMonday()), is(equalTo(LocalDate.of(2029, MAY, 28))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2030, orthodoxWhitMonday()), is(equalTo(LocalDate.of(2030, JUNE, 17))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2031, orthodoxWhitMonday()), is(equalTo(LocalDate.of(2031, JUNE, 2))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2032, orthodoxWhitMonday()), is(equalTo(LocalDate.of(2032, JUNE, 21))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2033, orthodoxWhitMonday()), is(equalTo(LocalDate.of(2033, JUNE, 13))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2034, orthodoxWhitMonday()), is(equalTo(LocalDate.of(2034, MAY, 29))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2035, orthodoxWhitMonday()), is(equalTo(LocalDate.of(2035, JUNE, 18))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2036, orthodoxWhitMonday()), is(equalTo(LocalDate.of(2036, JUNE, 9))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2037, orthodoxWhitMonday()), is(equalTo(LocalDate.of(2037, MAY, 25))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2038, orthodoxWhitMonday()), is(equalTo(LocalDate.of(2038, JUNE, 14))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2039, orthodoxWhitMonday()), is(equalTo(LocalDate.of(2039, JUNE, 6))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2040, orthodoxWhitMonday()), is(equalTo(LocalDate.of(2040, JUNE, 25))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2041, orthodoxWhitMonday()), is(equalTo(LocalDate.of(2041, JUNE, 10))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2042, orthodoxWhitMonday()), is(equalTo(LocalDate.of(2042, JUNE, 2))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2043, orthodoxWhitMonday()), is(equalTo(LocalDate.of(2043, JUNE, 22))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2044, orthodoxWhitMonday()), is(equalTo(LocalDate.of(2044, JUNE, 13))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2045, orthodoxWhitMonday()), is(equalTo(LocalDate.of(2045, MAY, 29))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2046, orthodoxWhitMonday()), is(equalTo(LocalDate.of(2046, JUNE, 18))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2047, orthodoxWhitMonday()), is(equalTo(LocalDate.of(2047, JUNE, 10))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2048, orthodoxWhitMonday()), is(equalTo(LocalDate.of(2048, MAY, 25))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2049, orthodoxWhitMonday()), is(equalTo(LocalDate.of(2049, JUNE, 14))));
	}

	@Test
	public void testOrthodoxWhitSunday() {
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2000, orthodoxWhitSunday()), is(equalTo(LocalDate.of(2000, JUNE, 18))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2001, orthodoxWhitSunday()), is(equalTo(LocalDate.of(2001, JUNE, 3))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2002, orthodoxWhitSunday()), is(equalTo(LocalDate.of(2002, JUNE, 23))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2003, orthodoxWhitSunday()), is(equalTo(LocalDate.of(2003, JUNE, 15))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2004, orthodoxWhitSunday()), is(equalTo(LocalDate.of(2004, MAY, 30))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2005, orthodoxWhitSunday()), is(equalTo(LocalDate.of(2005, JUNE, 19))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2006, orthodoxWhitSunday()), is(equalTo(LocalDate.of(2006, JUNE, 11))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2007, orthodoxWhitSunday()), is(equalTo(LocalDate.of(2007, MAY, 27))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2008, orthodoxWhitSunday()), is(equalTo(LocalDate.of(2008, JUNE, 15))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2009, orthodoxWhitSunday()), is(equalTo(LocalDate.of(2009, JUNE, 7))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2010, orthodoxWhitSunday()), is(equalTo(LocalDate.of(2010, MAY, 23))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2011, orthodoxWhitSunday()), is(equalTo(LocalDate.of(2011, JUNE, 12))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2012, orthodoxWhitSunday()), is(equalTo(LocalDate.of(2012, JUNE, 3))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2013, orthodoxWhitSunday()), is(equalTo(LocalDate.of(2013, JUNE, 23))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2014, orthodoxWhitSunday()), is(equalTo(LocalDate.of(2014, JUNE, 8))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2015, orthodoxWhitSunday()), is(equalTo(LocalDate.of(2015, MAY, 31))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2016, orthodoxWhitSunday()), is(equalTo(LocalDate.of(2016, JUNE, 19))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2017, orthodoxWhitSunday()), is(equalTo(LocalDate.of(2017, JUNE, 4))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2018, orthodoxWhitSunday()), is(equalTo(LocalDate.of(2018, MAY, 27))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2019, orthodoxWhitSunday()), is(equalTo(LocalDate.of(2019, JUNE, 16))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2020, orthodoxWhitSunday()), is(equalTo(LocalDate.of(2020, JUNE, 7))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2021, orthodoxWhitSunday()), is(equalTo(LocalDate.of(2021, JUNE, 20))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2022, orthodoxWhitSunday()), is(equalTo(LocalDate.of(2022, JUNE, 12))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2023, orthodoxWhitSunday()), is(equalTo(LocalDate.of(2023, JUNE, 4))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2024, orthodoxWhitSunday()), is(equalTo(LocalDate.of(2024, JUNE, 23))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2025, orthodoxWhitSunday()), is(equalTo(LocalDate.of(2025, JUNE, 8))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2026, orthodoxWhitSunday()), is(equalTo(LocalDate.of(2026, MAY, 31))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2027, orthodoxWhitSunday()), is(equalTo(LocalDate.of(2027, JUNE, 20))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2028, orthodoxWhitSunday()), is(equalTo(LocalDate.of(2028, JUNE, 4))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2029, orthodoxWhitSunday()), is(equalTo(LocalDate.of(2029, MAY, 27))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2030, orthodoxWhitSunday()), is(equalTo(LocalDate.of(2030, JUNE, 16))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2031, orthodoxWhitSunday()), is(equalTo(LocalDate.of(2031, JUNE, 1))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2032, orthodoxWhitSunday()), is(equalTo(LocalDate.of(2032, JUNE, 20))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2033, orthodoxWhitSunday()), is(equalTo(LocalDate.of(2033, JUNE, 12))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2034, orthodoxWhitSunday()), is(equalTo(LocalDate.of(2034, MAY, 28))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2035, orthodoxWhitSunday()), is(equalTo(LocalDate.of(2035, JUNE, 17))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2036, orthodoxWhitSunday()), is(equalTo(LocalDate.of(2036, JUNE, 8))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2037, orthodoxWhitSunday()), is(equalTo(LocalDate.of(2037, MAY, 24))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2038, orthodoxWhitSunday()), is(equalTo(LocalDate.of(2038, JUNE, 13))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2039, orthodoxWhitSunday()), is(equalTo(LocalDate.of(2039, JUNE, 5))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2040, orthodoxWhitSunday()), is(equalTo(LocalDate.of(2040, JUNE, 24))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2041, orthodoxWhitSunday()), is(equalTo(LocalDate.of(2041, JUNE, 9))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2042, orthodoxWhitSunday()), is(equalTo(LocalDate.of(2042, JUNE, 1))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2043, orthodoxWhitSunday()), is(equalTo(LocalDate.of(2043, JUNE, 21))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2044, orthodoxWhitSunday()), is(equalTo(LocalDate.of(2044, JUNE, 12))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2045, orthodoxWhitSunday()), is(equalTo(LocalDate.of(2045, MAY, 28))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2046, orthodoxWhitSunday()), is(equalTo(LocalDate.of(2046, JUNE, 17))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2047, orthodoxWhitSunday()), is(equalTo(LocalDate.of(2047, JUNE, 9))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2048, orthodoxWhitSunday()), is(equalTo(LocalDate.of(2048, MAY, 24))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2049, orthodoxWhitSunday()), is(equalTo(LocalDate.of(2049, JUNE, 13))));
	}

	@Test
	public void testPalmSunday() {
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2000, palmSunday()), is(equalTo(LocalDate.of(2000, APRIL, 16))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2001, palmSunday()), is(equalTo(LocalDate.of(2001, APRIL, 8))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2002, palmSunday()), is(equalTo(LocalDate.of(2002, MARCH, 24))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2003, palmSunday()), is(equalTo(LocalDate.of(2003, APRIL, 13))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2004, palmSunday()), is(equalTo(LocalDate.of(2004, APRIL, 4))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2005, palmSunday()), is(equalTo(LocalDate.of(2005, MARCH, 20))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2006, palmSunday()), is(equalTo(LocalDate.of(2006, APRIL, 9))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2007, palmSunday()), is(equalTo(LocalDate.of(2007, APRIL, 1))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2008, palmSunday()), is(equalTo(LocalDate.of(2008, MARCH, 16))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2009, palmSunday()), is(equalTo(LocalDate.of(2009, APRIL, 5))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2010, palmSunday()), is(equalTo(LocalDate.of(2010, MARCH, 28))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2011, palmSunday()), is(equalTo(LocalDate.of(2011, APRIL, 17))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2012, palmSunday()), is(equalTo(LocalDate.of(2012, APRIL, 1))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2013, palmSunday()), is(equalTo(LocalDate.of(2013, MARCH, 24))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2014, palmSunday()), is(equalTo(LocalDate.of(2014, APRIL, 13))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2015, palmSunday()), is(equalTo(LocalDate.of(2015, MARCH, 29))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2016, palmSunday()), is(equalTo(LocalDate.of(2016, MARCH, 20))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2017, palmSunday()), is(equalTo(LocalDate.of(2017, APRIL, 9))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2018, palmSunday()), is(equalTo(LocalDate.of(2018, MARCH, 25))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2019, palmSunday()), is(equalTo(LocalDate.of(2019, APRIL, 14))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2020, palmSunday()), is(equalTo(LocalDate.of(2020, APRIL, 5))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2021, palmSunday()), is(equalTo(LocalDate.of(2021, MARCH, 28))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2022, palmSunday()), is(equalTo(LocalDate.of(2022, APRIL, 10))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2023, palmSunday()), is(equalTo(LocalDate.of(2023, APRIL, 2))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2024, palmSunday()), is(equalTo(LocalDate.of(2024, MARCH, 24))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2025, palmSunday()), is(equalTo(LocalDate.of(2025, APRIL, 13))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2026, palmSunday()), is(equalTo(LocalDate.of(2026, MARCH, 29))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2027, palmSunday()), is(equalTo(LocalDate.of(2027, MARCH, 21))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2028, palmSunday()), is(equalTo(LocalDate.of(2028, APRIL, 9))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2029, palmSunday()), is(equalTo(LocalDate.of(2029, MARCH, 25))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2030, palmSunday()), is(equalTo(LocalDate.of(2030, APRIL, 14))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2031, palmSunday()), is(equalTo(LocalDate.of(2031, APRIL, 6))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2032, palmSunday()), is(equalTo(LocalDate.of(2032, MARCH, 21))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2033, palmSunday()), is(equalTo(LocalDate.of(2033, APRIL, 10))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2034, palmSunday()), is(equalTo(LocalDate.of(2034, APRIL, 2))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2035, palmSunday()), is(equalTo(LocalDate.of(2035, MARCH, 18))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2036, palmSunday()), is(equalTo(LocalDate.of(2036, APRIL, 6))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2037, palmSunday()), is(equalTo(LocalDate.of(2037, MARCH, 29))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2038, palmSunday()), is(equalTo(LocalDate.of(2038, APRIL, 18))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2039, palmSunday()), is(equalTo(LocalDate.of(2039, APRIL, 3))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2040, palmSunday()), is(equalTo(LocalDate.of(2040, MARCH, 25))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2041, palmSunday()), is(equalTo(LocalDate.of(2041, APRIL, 14))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2042, palmSunday()), is(equalTo(LocalDate.of(2042, MARCH, 30))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2043, palmSunday()), is(equalTo(LocalDate.of(2043, MARCH, 22))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2044, palmSunday()), is(equalTo(LocalDate.of(2044, APRIL, 10))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2045, palmSunday()), is(equalTo(LocalDate.of(2045, APRIL, 2))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2046, palmSunday()), is(equalTo(LocalDate.of(2046, MARCH, 18))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2047, palmSunday()), is(equalTo(LocalDate.of(2047, APRIL, 7))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2048, palmSunday()), is(equalTo(LocalDate.of(2048, MARCH, 29))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2049, palmSunday()), is(equalTo(LocalDate.of(2049, APRIL, 11))));
	}

	@Test
	public void testShroveMonday() {
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2000, shroveMonday()), is(equalTo(LocalDate.of(2000, MARCH, 6))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2001, shroveMonday()), is(equalTo(LocalDate.of(2001, FEBRUARY, 26))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2002, shroveMonday()), is(equalTo(LocalDate.of(2002, FEBRUARY, 11))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2003, shroveMonday()), is(equalTo(LocalDate.of(2003, MARCH, 3))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2004, shroveMonday()), is(equalTo(LocalDate.of(2004, FEBRUARY, 23))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2005, shroveMonday()), is(equalTo(LocalDate.of(2005, FEBRUARY, 7))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2006, shroveMonday()), is(equalTo(LocalDate.of(2006, FEBRUARY, 27))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2007, shroveMonday()), is(equalTo(LocalDate.of(2007, FEBRUARY, 19))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2008, shroveMonday()), is(equalTo(LocalDate.of(2008, FEBRUARY, 4))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2009, shroveMonday()), is(equalTo(LocalDate.of(2009, FEBRUARY, 23))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2010, shroveMonday()), is(equalTo(LocalDate.of(2010, FEBRUARY, 15))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2011, shroveMonday()), is(equalTo(LocalDate.of(2011, MARCH, 7))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2012, shroveMonday()), is(equalTo(LocalDate.of(2012, FEBRUARY, 20))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2013, shroveMonday()), is(equalTo(LocalDate.of(2013, FEBRUARY, 11))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2014, shroveMonday()), is(equalTo(LocalDate.of(2014, MARCH, 3))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2015, shroveMonday()), is(equalTo(LocalDate.of(2015, FEBRUARY, 16))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2016, shroveMonday()), is(equalTo(LocalDate.of(2016, FEBRUARY, 8))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2017, shroveMonday()), is(equalTo(LocalDate.of(2017, FEBRUARY, 27))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2018, shroveMonday()), is(equalTo(LocalDate.of(2018, FEBRUARY, 12))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2019, shroveMonday()), is(equalTo(LocalDate.of(2019, MARCH, 4))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2020, shroveMonday()), is(equalTo(LocalDate.of(2020, FEBRUARY, 24))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2021, shroveMonday()), is(equalTo(LocalDate.of(2021, FEBRUARY, 15))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2022, shroveMonday()), is(equalTo(LocalDate.of(2022, FEBRUARY, 28))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2023, shroveMonday()), is(equalTo(LocalDate.of(2023, FEBRUARY, 20))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2024, shroveMonday()), is(equalTo(LocalDate.of(2024, FEBRUARY, 12))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2025, shroveMonday()), is(equalTo(LocalDate.of(2025, MARCH, 3))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2026, shroveMonday()), is(equalTo(LocalDate.of(2026, FEBRUARY, 16))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2027, shroveMonday()), is(equalTo(LocalDate.of(2027, FEBRUARY, 8))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2028, shroveMonday()), is(equalTo(LocalDate.of(2028, FEBRUARY, 28))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2029, shroveMonday()), is(equalTo(LocalDate.of(2029, FEBRUARY, 12))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2030, shroveMonday()), is(equalTo(LocalDate.of(2030, MARCH, 4))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2031, shroveMonday()), is(equalTo(LocalDate.of(2031, FEBRUARY, 24))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2032, shroveMonday()), is(equalTo(LocalDate.of(2032, FEBRUARY, 9))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2033, shroveMonday()), is(equalTo(LocalDate.of(2033, FEBRUARY, 28))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2034, shroveMonday()), is(equalTo(LocalDate.of(2034, FEBRUARY, 20))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2035, shroveMonday()), is(equalTo(LocalDate.of(2035, FEBRUARY, 5))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2036, shroveMonday()), is(equalTo(LocalDate.of(2036, FEBRUARY, 25))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2037, shroveMonday()), is(equalTo(LocalDate.of(2037, FEBRUARY, 16))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2038, shroveMonday()), is(equalTo(LocalDate.of(2038, MARCH, 8))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2039, shroveMonday()), is(equalTo(LocalDate.of(2039, FEBRUARY, 21))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2040, shroveMonday()), is(equalTo(LocalDate.of(2040, FEBRUARY, 13))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2041, shroveMonday()), is(equalTo(LocalDate.of(2041, MARCH, 4))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2042, shroveMonday()), is(equalTo(LocalDate.of(2042, FEBRUARY, 17))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2043, shroveMonday()), is(equalTo(LocalDate.of(2043, FEBRUARY, 9))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2044, shroveMonday()), is(equalTo(LocalDate.of(2044, FEBRUARY, 29))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2045, shroveMonday()), is(equalTo(LocalDate.of(2045, FEBRUARY, 20))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2046, shroveMonday()), is(equalTo(LocalDate.of(2046, FEBRUARY, 5))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2047, shroveMonday()), is(equalTo(LocalDate.of(2047, FEBRUARY, 25))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2048, shroveMonday()), is(equalTo(LocalDate.of(2048, FEBRUARY, 17))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2049, shroveMonday()), is(equalTo(LocalDate.of(2049, MARCH, 1))));
	}

	@Test
	public void testShroveTuesday() {
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2000, shroveTuesday()), is(equalTo(LocalDate.of(2000, MARCH, 7))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2001, shroveTuesday()), is(equalTo(LocalDate.of(2001, FEBRUARY, 27))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2002, shroveTuesday()), is(equalTo(LocalDate.of(2002, FEBRUARY, 12))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2003, shroveTuesday()), is(equalTo(LocalDate.of(2003, MARCH, 4))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2004, shroveTuesday()), is(equalTo(LocalDate.of(2004, FEBRUARY, 24))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2005, shroveTuesday()), is(equalTo(LocalDate.of(2005, FEBRUARY, 8))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2006, shroveTuesday()), is(equalTo(LocalDate.of(2006, FEBRUARY, 28))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2007, shroveTuesday()), is(equalTo(LocalDate.of(2007, FEBRUARY, 20))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2008, shroveTuesday()), is(equalTo(LocalDate.of(2008, FEBRUARY, 5))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2009, shroveTuesday()), is(equalTo(LocalDate.of(2009, FEBRUARY, 24))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2010, shroveTuesday()), is(equalTo(LocalDate.of(2010, FEBRUARY, 16))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2011, shroveTuesday()), is(equalTo(LocalDate.of(2011, MARCH, 8))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2012, shroveTuesday()), is(equalTo(LocalDate.of(2012, FEBRUARY, 21))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2013, shroveTuesday()), is(equalTo(LocalDate.of(2013, FEBRUARY, 12))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2014, shroveTuesday()), is(equalTo(LocalDate.of(2014, MARCH, 4))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2015, shroveTuesday()), is(equalTo(LocalDate.of(2015, FEBRUARY, 17))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2016, shroveTuesday()), is(equalTo(LocalDate.of(2016, FEBRUARY, 9))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2017, shroveTuesday()), is(equalTo(LocalDate.of(2017, FEBRUARY, 28))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2018, shroveTuesday()), is(equalTo(LocalDate.of(2018, FEBRUARY, 13))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2019, shroveTuesday()), is(equalTo(LocalDate.of(2019, MARCH, 5))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2020, shroveTuesday()), is(equalTo(LocalDate.of(2020, FEBRUARY, 25))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2021, shroveTuesday()), is(equalTo(LocalDate.of(2021, FEBRUARY, 16))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2022, shroveTuesday()), is(equalTo(LocalDate.of(2022, MARCH, 1))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2023, shroveTuesday()), is(equalTo(LocalDate.of(2023, FEBRUARY, 21))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2024, shroveTuesday()), is(equalTo(LocalDate.of(2024, FEBRUARY, 13))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2025, shroveTuesday()), is(equalTo(LocalDate.of(2025, MARCH, 4))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2026, shroveTuesday()), is(equalTo(LocalDate.of(2026, FEBRUARY, 17))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2027, shroveTuesday()), is(equalTo(LocalDate.of(2027, FEBRUARY, 9))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2028, shroveTuesday()), is(equalTo(LocalDate.of(2028, FEBRUARY, 29))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2029, shroveTuesday()), is(equalTo(LocalDate.of(2029, FEBRUARY, 13))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2030, shroveTuesday()), is(equalTo(LocalDate.of(2030, MARCH, 5))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2031, shroveTuesday()), is(equalTo(LocalDate.of(2031, FEBRUARY, 25))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2032, shroveTuesday()), is(equalTo(LocalDate.of(2032, FEBRUARY, 10))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2033, shroveTuesday()), is(equalTo(LocalDate.of(2033, MARCH, 1))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2034, shroveTuesday()), is(equalTo(LocalDate.of(2034, FEBRUARY, 21))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2035, shroveTuesday()), is(equalTo(LocalDate.of(2035, FEBRUARY, 6))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2036, shroveTuesday()), is(equalTo(LocalDate.of(2036, FEBRUARY, 26))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2037, shroveTuesday()), is(equalTo(LocalDate.of(2037, FEBRUARY, 17))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2038, shroveTuesday()), is(equalTo(LocalDate.of(2038, MARCH, 9))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2039, shroveTuesday()), is(equalTo(LocalDate.of(2039, FEBRUARY, 22))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2040, shroveTuesday()), is(equalTo(LocalDate.of(2040, FEBRUARY, 14))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2041, shroveTuesday()), is(equalTo(LocalDate.of(2041, MARCH, 5))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2042, shroveTuesday()), is(equalTo(LocalDate.of(2042, FEBRUARY, 18))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2043, shroveTuesday()), is(equalTo(LocalDate.of(2043, FEBRUARY, 10))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2044, shroveTuesday()), is(equalTo(LocalDate.of(2044, MARCH, 1))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2045, shroveTuesday()), is(equalTo(LocalDate.of(2045, FEBRUARY, 21))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2046, shroveTuesday()), is(equalTo(LocalDate.of(2046, FEBRUARY, 6))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2047, shroveTuesday()), is(equalTo(LocalDate.of(2047, FEBRUARY, 26))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2048, shroveTuesday()), is(equalTo(LocalDate.of(2048, FEBRUARY, 18))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2049, shroveTuesday()), is(equalTo(LocalDate.of(2049, MARCH, 2))));
	}

	@Test
	public void testTrinitySunday() {
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2000, trinitySunday()), is(equalTo(LocalDate.of(2000, JUNE, 18))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2001, trinitySunday()), is(equalTo(LocalDate.of(2001, JUNE, 10))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2002, trinitySunday()), is(equalTo(LocalDate.of(2002, MAY, 26))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2003, trinitySunday()), is(equalTo(LocalDate.of(2003, JUNE, 15))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2004, trinitySunday()), is(equalTo(LocalDate.of(2004, JUNE, 6))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2005, trinitySunday()), is(equalTo(LocalDate.of(2005, MAY, 22))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2006, trinitySunday()), is(equalTo(LocalDate.of(2006, JUNE, 11))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2007, trinitySunday()), is(equalTo(LocalDate.of(2007, JUNE, 3))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2008, trinitySunday()), is(equalTo(LocalDate.of(2008, MAY, 18))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2009, trinitySunday()), is(equalTo(LocalDate.of(2009, JUNE, 7))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2010, trinitySunday()), is(equalTo(LocalDate.of(2010, MAY, 30))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2011, trinitySunday()), is(equalTo(LocalDate.of(2011, JUNE, 19))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2012, trinitySunday()), is(equalTo(LocalDate.of(2012, JUNE, 3))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2013, trinitySunday()), is(equalTo(LocalDate.of(2013, MAY, 26))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2014, trinitySunday()), is(equalTo(LocalDate.of(2014, JUNE, 15))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2015, trinitySunday()), is(equalTo(LocalDate.of(2015, MAY, 31))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2016, trinitySunday()), is(equalTo(LocalDate.of(2016, MAY, 22))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2017, trinitySunday()), is(equalTo(LocalDate.of(2017, JUNE, 11))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2018, trinitySunday()), is(equalTo(LocalDate.of(2018, MAY, 27))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2019, trinitySunday()), is(equalTo(LocalDate.of(2019, JUNE, 16))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2020, trinitySunday()), is(equalTo(LocalDate.of(2020, JUNE, 7))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2021, trinitySunday()), is(equalTo(LocalDate.of(2021, MAY, 30))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2022, trinitySunday()), is(equalTo(LocalDate.of(2022, JUNE, 12))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2023, trinitySunday()), is(equalTo(LocalDate.of(2023, JUNE, 4))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2024, trinitySunday()), is(equalTo(LocalDate.of(2024, MAY, 26))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2025, trinitySunday()), is(equalTo(LocalDate.of(2025, JUNE, 15))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2026, trinitySunday()), is(equalTo(LocalDate.of(2026, MAY, 31))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2027, trinitySunday()), is(equalTo(LocalDate.of(2027, MAY, 23))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2028, trinitySunday()), is(equalTo(LocalDate.of(2028, JUNE, 11))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2029, trinitySunday()), is(equalTo(LocalDate.of(2029, MAY, 27))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2030, trinitySunday()), is(equalTo(LocalDate.of(2030, JUNE, 16))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2031, trinitySunday()), is(equalTo(LocalDate.of(2031, JUNE, 8))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2032, trinitySunday()), is(equalTo(LocalDate.of(2032, MAY, 23))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2033, trinitySunday()), is(equalTo(LocalDate.of(2033, JUNE, 12))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2034, trinitySunday()), is(equalTo(LocalDate.of(2034, JUNE, 4))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2035, trinitySunday()), is(equalTo(LocalDate.of(2035, MAY, 20))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2036, trinitySunday()), is(equalTo(LocalDate.of(2036, JUNE, 8))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2037, trinitySunday()), is(equalTo(LocalDate.of(2037, MAY, 31))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2038, trinitySunday()), is(equalTo(LocalDate.of(2038, JUNE, 20))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2039, trinitySunday()), is(equalTo(LocalDate.of(2039, JUNE, 5))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2040, trinitySunday()), is(equalTo(LocalDate.of(2040, MAY, 27))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2041, trinitySunday()), is(equalTo(LocalDate.of(2041, JUNE, 16))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2042, trinitySunday()), is(equalTo(LocalDate.of(2042, JUNE, 1))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2043, trinitySunday()), is(equalTo(LocalDate.of(2043, MAY, 24))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2044, trinitySunday()), is(equalTo(LocalDate.of(2044, JUNE, 12))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2045, trinitySunday()), is(equalTo(LocalDate.of(2045, JUNE, 4))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2046, trinitySunday()), is(equalTo(LocalDate.of(2046, MAY, 20))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2047, trinitySunday()), is(equalTo(LocalDate.of(2047, JUNE, 9))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2048, trinitySunday()), is(equalTo(LocalDate.of(2048, MAY, 31))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2049, trinitySunday()), is(equalTo(LocalDate.of(2049, JUNE, 13))));
	}

	@Test
	public void testWhitMonday() {
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2000, whitMonday()), is(equalTo(LocalDate.of(2000, JUNE, 12))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2001, whitMonday()), is(equalTo(LocalDate.of(2001, JUNE, 4))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2002, whitMonday()), is(equalTo(LocalDate.of(2002, MAY, 20))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2003, whitMonday()), is(equalTo(LocalDate.of(2003, JUNE, 9))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2004, whitMonday()), is(equalTo(LocalDate.of(2004, MAY, 31))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2005, whitMonday()), is(equalTo(LocalDate.of(2005, MAY, 16))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2006, whitMonday()), is(equalTo(LocalDate.of(2006, JUNE, 5))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2007, whitMonday()), is(equalTo(LocalDate.of(2007, MAY, 28))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2008, whitMonday()), is(equalTo(LocalDate.of(2008, MAY, 12))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2009, whitMonday()), is(equalTo(LocalDate.of(2009, JUNE, 1))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2010, whitMonday()), is(equalTo(LocalDate.of(2010, MAY, 24))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2011, whitMonday()), is(equalTo(LocalDate.of(2011, JUNE, 13))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2012, whitMonday()), is(equalTo(LocalDate.of(2012, MAY, 28))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2013, whitMonday()), is(equalTo(LocalDate.of(2013, MAY, 20))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2014, whitMonday()), is(equalTo(LocalDate.of(2014, JUNE, 9))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2015, whitMonday()), is(equalTo(LocalDate.of(2015, MAY, 25))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2016, whitMonday()), is(equalTo(LocalDate.of(2016, MAY, 16))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2017, whitMonday()), is(equalTo(LocalDate.of(2017, JUNE, 5))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2018, whitMonday()), is(equalTo(LocalDate.of(2018, MAY, 21))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2019, whitMonday()), is(equalTo(LocalDate.of(2019, JUNE, 10))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2020, whitMonday()), is(equalTo(LocalDate.of(2020, JUNE, 1))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2021, whitMonday()), is(equalTo(LocalDate.of(2021, MAY, 24))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2022, whitMonday()), is(equalTo(LocalDate.of(2022, JUNE, 6))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2023, whitMonday()), is(equalTo(LocalDate.of(2023, MAY, 29))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2024, whitMonday()), is(equalTo(LocalDate.of(2024, MAY, 20))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2025, whitMonday()), is(equalTo(LocalDate.of(2025, JUNE, 9))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2026, whitMonday()), is(equalTo(LocalDate.of(2026, MAY, 25))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2027, whitMonday()), is(equalTo(LocalDate.of(2027, MAY, 17))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2028, whitMonday()), is(equalTo(LocalDate.of(2028, JUNE, 5))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2029, whitMonday()), is(equalTo(LocalDate.of(2029, MAY, 21))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2030, whitMonday()), is(equalTo(LocalDate.of(2030, JUNE, 10))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2031, whitMonday()), is(equalTo(LocalDate.of(2031, JUNE, 2))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2032, whitMonday()), is(equalTo(LocalDate.of(2032, MAY, 17))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2033, whitMonday()), is(equalTo(LocalDate.of(2033, JUNE, 6))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2034, whitMonday()), is(equalTo(LocalDate.of(2034, MAY, 29))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2035, whitMonday()), is(equalTo(LocalDate.of(2035, MAY, 14))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2036, whitMonday()), is(equalTo(LocalDate.of(2036, JUNE, 2))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2037, whitMonday()), is(equalTo(LocalDate.of(2037, MAY, 25))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2038, whitMonday()), is(equalTo(LocalDate.of(2038, JUNE, 14))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2039, whitMonday()), is(equalTo(LocalDate.of(2039, MAY, 30))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2040, whitMonday()), is(equalTo(LocalDate.of(2040, MAY, 21))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2041, whitMonday()), is(equalTo(LocalDate.of(2041, JUNE, 10))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2042, whitMonday()), is(equalTo(LocalDate.of(2042, MAY, 26))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2043, whitMonday()), is(equalTo(LocalDate.of(2043, MAY, 18))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2044, whitMonday()), is(equalTo(LocalDate.of(2044, JUNE, 6))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2045, whitMonday()), is(equalTo(LocalDate.of(2045, MAY, 29))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2046, whitMonday()), is(equalTo(LocalDate.of(2046, MAY, 14))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2047, whitMonday()), is(equalTo(LocalDate.of(2047, JUNE, 3))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2048, whitMonday()), is(equalTo(LocalDate.of(2048, MAY, 25))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2049, whitMonday()), is(equalTo(LocalDate.of(2049, JUNE, 7))));
	}

	@Test
	public void testWhitSunday() {
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2000, whitSunday()), is(equalTo(LocalDate.of(2000, JUNE, 11))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2001, whitSunday()), is(equalTo(LocalDate.of(2001, JUNE, 3))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2002, whitSunday()), is(equalTo(LocalDate.of(2002, MAY, 19))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2003, whitSunday()), is(equalTo(LocalDate.of(2003, JUNE, 8))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2004, whitSunday()), is(equalTo(LocalDate.of(2004, MAY, 30))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2005, whitSunday()), is(equalTo(LocalDate.of(2005, MAY, 15))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2006, whitSunday()), is(equalTo(LocalDate.of(2006, JUNE, 4))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2007, whitSunday()), is(equalTo(LocalDate.of(2007, MAY, 27))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2008, whitSunday()), is(equalTo(LocalDate.of(2008, MAY, 11))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2009, whitSunday()), is(equalTo(LocalDate.of(2009, MAY, 31))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2010, whitSunday()), is(equalTo(LocalDate.of(2010, MAY, 23))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2011, whitSunday()), is(equalTo(LocalDate.of(2011, JUNE, 12))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2012, whitSunday()), is(equalTo(LocalDate.of(2012, MAY, 27))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2013, whitSunday()), is(equalTo(LocalDate.of(2013, MAY, 19))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2014, whitSunday()), is(equalTo(LocalDate.of(2014, JUNE, 8))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2015, whitSunday()), is(equalTo(LocalDate.of(2015, MAY, 24))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2016, whitSunday()), is(equalTo(LocalDate.of(2016, MAY, 15))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2017, whitSunday()), is(equalTo(LocalDate.of(2017, JUNE, 4))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2018, whitSunday()), is(equalTo(LocalDate.of(2018, MAY, 20))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2019, whitSunday()), is(equalTo(LocalDate.of(2019, JUNE, 9))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2020, whitSunday()), is(equalTo(LocalDate.of(2020, MAY, 31))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2021, whitSunday()), is(equalTo(LocalDate.of(2021, MAY, 23))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2022, whitSunday()), is(equalTo(LocalDate.of(2022, JUNE, 5))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2023, whitSunday()), is(equalTo(LocalDate.of(2023, MAY, 28))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2024, whitSunday()), is(equalTo(LocalDate.of(2024, MAY, 19))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2025, whitSunday()), is(equalTo(LocalDate.of(2025, JUNE, 8))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2026, whitSunday()), is(equalTo(LocalDate.of(2026, MAY, 24))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2027, whitSunday()), is(equalTo(LocalDate.of(2027, MAY, 16))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2028, whitSunday()), is(equalTo(LocalDate.of(2028, JUNE, 4))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2029, whitSunday()), is(equalTo(LocalDate.of(2029, MAY, 20))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2030, whitSunday()), is(equalTo(LocalDate.of(2030, JUNE, 9))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2031, whitSunday()), is(equalTo(LocalDate.of(2031, JUNE, 1))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2032, whitSunday()), is(equalTo(LocalDate.of(2032, MAY, 16))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2033, whitSunday()), is(equalTo(LocalDate.of(2033, JUNE, 5))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2034, whitSunday()), is(equalTo(LocalDate.of(2034, MAY, 28))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2035, whitSunday()), is(equalTo(LocalDate.of(2035, MAY, 13))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2036, whitSunday()), is(equalTo(LocalDate.of(2036, JUNE, 1))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2037, whitSunday()), is(equalTo(LocalDate.of(2037, MAY, 24))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2038, whitSunday()), is(equalTo(LocalDate.of(2038, JUNE, 13))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2039, whitSunday()), is(equalTo(LocalDate.of(2039, MAY, 29))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2040, whitSunday()), is(equalTo(LocalDate.of(2040, MAY, 20))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2041, whitSunday()), is(equalTo(LocalDate.of(2041, JUNE, 9))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2042, whitSunday()), is(equalTo(LocalDate.of(2042, MAY, 25))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2043, whitSunday()), is(equalTo(LocalDate.of(2043, MAY, 17))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2044, whitSunday()), is(equalTo(LocalDate.of(2044, JUNE, 5))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2045, whitSunday()), is(equalTo(LocalDate.of(2045, MAY, 28))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2046, whitSunday()), is(equalTo(LocalDate.of(2046, MAY, 13))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2047, whitSunday()), is(equalTo(LocalDate.of(2047, JUNE, 2))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2048, whitSunday()), is(equalTo(LocalDate.of(2048, MAY, 24))));
		assertThat(TemporalAdjusterUtils.applyTemporalAdjuster(2049, whitSunday()), is(equalTo(LocalDate.of(2049, JUNE, 6))));
	}

}
